// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SlamSerialize.proto

#include "SlamSerialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acceleration_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocity_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GlobalState_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_SlamSerialize_2eproto;
namespace LpgfSlamSerialize {
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class AccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acceleration> _instance;
} _Acceleration_default_instance_;
class VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Velocity> _instance;
} _Velocity_default_instance_;
class AngularVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularVelocity> _instance;
} _AngularVelocity_default_instance_;
class OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Orientation> _instance;
} _Orientation_default_instance_;
class GlobalStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalState> _instance;
} _GlobalState_default_instance_;
class GlobalStateInTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalStateInTime> _instance;
} _GlobalStateInTime_default_instance_;
class TrackerCoordinateSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackerCoordinateSystem> _instance;
} _TrackerCoordinateSystem_default_instance_;
class CameraImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraImage> _instance;
} _CameraImage_default_instance_;
class SensorImuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorImu> _instance;
} _SensorImu_default_instance_;
class SensorGlobalStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorGlobalState> _instance;
} _SensorGlobalState_default_instance_;
class SensorFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorFeature> _instance;
} _SensorFeature_default_instance_;
}  // namespace LpgfSlamSerialize
static void InitDefaultsscc_info_Acceleration_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_Acceleration_default_instance_;
    new (ptr) ::LpgfSlamSerialize::Acceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::Acceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acceleration_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Acceleration_SlamSerialize_2eproto}, {}};

static void InitDefaultsscc_info_AngularVelocity_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_AngularVelocity_default_instance_;
    new (ptr) ::LpgfSlamSerialize::AngularVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::AngularVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocity_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AngularVelocity_SlamSerialize_2eproto}, {}};

static void InitDefaultsscc_info_CameraImage_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_CameraImage_default_instance_;
    new (ptr) ::LpgfSlamSerialize::CameraImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::CameraImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraImage_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CameraImage_SlamSerialize_2eproto}, {
      &scc_info_GlobalState_SlamSerialize_2eproto.base,
      &scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_GlobalState_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_GlobalState_default_instance_;
    new (ptr) ::LpgfSlamSerialize::GlobalState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::GlobalState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GlobalState_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GlobalState_SlamSerialize_2eproto}, {
      &scc_info_Position_SlamSerialize_2eproto.base,
      &scc_info_Orientation_SlamSerialize_2eproto.base,
      &scc_info_Velocity_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_GlobalStateInTime_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_GlobalStateInTime_default_instance_;
    new (ptr) ::LpgfSlamSerialize::GlobalStateInTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::GlobalStateInTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalStateInTime_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalStateInTime_SlamSerialize_2eproto}, {
      &scc_info_GlobalState_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_Orientation_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_Orientation_default_instance_;
    new (ptr) ::LpgfSlamSerialize::Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Orientation_SlamSerialize_2eproto}, {}};

static void InitDefaultsscc_info_Position_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_Position_default_instance_;
    new (ptr) ::LpgfSlamSerialize::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Position_SlamSerialize_2eproto}, {}};

static void InitDefaultsscc_info_SensorFeature_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_SensorFeature_default_instance_;
    new (ptr) ::LpgfSlamSerialize::SensorFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::SensorFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorFeature_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorFeature_SlamSerialize_2eproto}, {
      &scc_info_Position_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_SensorGlobalState_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_SensorGlobalState_default_instance_;
    new (ptr) ::LpgfSlamSerialize::SensorGlobalState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::SensorGlobalState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorGlobalState_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorGlobalState_SlamSerialize_2eproto}, {
      &scc_info_GlobalState_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_SensorImu_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_SensorImu_default_instance_;
    new (ptr) ::LpgfSlamSerialize::SensorImu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::SensorImu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorImu_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SensorImu_SlamSerialize_2eproto}, {
      &scc_info_Acceleration_SlamSerialize_2eproto.base,
      &scc_info_AngularVelocity_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_TrackerCoordinateSystem_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_;
    new (ptr) ::LpgfSlamSerialize::TrackerCoordinateSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::TrackerCoordinateSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrackerCoordinateSystem_SlamSerialize_2eproto}, {
      &scc_info_Position_SlamSerialize_2eproto.base,
      &scc_info_Orientation_SlamSerialize_2eproto.base,}};

static void InitDefaultsscc_info_Velocity_SlamSerialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LpgfSlamSerialize::_Velocity_default_instance_;
    new (ptr) ::LpgfSlamSerialize::Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LpgfSlamSerialize::Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_SlamSerialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Velocity_SlamSerialize_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SlamSerialize_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SlamSerialize_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SlamSerialize_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SlamSerialize_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, x_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, y_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, z_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, x_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, y_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Position, z_sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, x_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, y_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, z_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, x_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, y_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Acceleration, z_sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, x_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, y_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, z_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, x_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, y_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Velocity, z_sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, x_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, y_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, z_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, x_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, y_sigma_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::AngularVelocity, z_sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, w_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, x_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, y_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, z_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::Orientation, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalState, position_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalState, orientation_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalState, velocity_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalState, velocityvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalStateInTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalStateInTime, timestamp_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::GlobalStateInTime, globalstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::TrackerCoordinateSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::TrackerCoordinateSystem, position_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::TrackerCoordinateSystem, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, datanumber_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, imagedata_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, state_odom_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, state_map_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, cameranumber_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, imagedata_second_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, cameranumber_second_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, imagebase_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, imagebase_second_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, hasglobalstate_odom_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::CameraImage, hasglobalstate_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorImu, timestamp_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorImu, acc_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorImu, gyro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorGlobalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorGlobalState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorGlobalState, globalstate_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorGlobalState, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, timestamp_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, lastobserved_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, position_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, closestkeyframeposition_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, observationcount_),
  PROTOBUF_FIELD_OFFSET(::LpgfSlamSerialize::SensorFeature, anchorid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LpgfSlamSerialize::Position)},
  { 11, -1, sizeof(::LpgfSlamSerialize::Acceleration)},
  { 22, -1, sizeof(::LpgfSlamSerialize::Velocity)},
  { 33, -1, sizeof(::LpgfSlamSerialize::AngularVelocity)},
  { 44, -1, sizeof(::LpgfSlamSerialize::Orientation)},
  { 54, -1, sizeof(::LpgfSlamSerialize::GlobalState)},
  { 63, -1, sizeof(::LpgfSlamSerialize::GlobalStateInTime)},
  { 70, -1, sizeof(::LpgfSlamSerialize::TrackerCoordinateSystem)},
  { 77, -1, sizeof(::LpgfSlamSerialize::CameraImage)},
  { 94, -1, sizeof(::LpgfSlamSerialize::SensorImu)},
  { 102, -1, sizeof(::LpgfSlamSerialize::SensorGlobalState)},
  { 110, -1, sizeof(::LpgfSlamSerialize::SensorFeature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_Acceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_AngularVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_GlobalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_GlobalStateInTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_CameraImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_SensorImu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_SensorGlobalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LpgfSlamSerialize::_SensorFeature_default_instance_),
};

const char descriptor_table_protodef_SlamSerialize_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023SlamSerialize.proto\022\021LpgfSlamSerialize"
  "\"^\n\010Position\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030"
  "\003 \001(\001\022\017\n\007x_sigma\030\004 \001(\001\022\017\n\007y_sigma\030\005 \001(\001\022"
  "\017\n\007z_sigma\030\006 \001(\001\"b\n\014Acceleration\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\017\n\007x_sigma\030\004 \001"
  "(\001\022\017\n\007y_sigma\030\005 \001(\001\022\017\n\007z_sigma\030\006 \001(\001\"^\n\010"
  "Velocity\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001("
  "\001\022\017\n\007x_sigma\030\004 \001(\001\022\017\n\007y_sigma\030\005 \001(\001\022\017\n\007z"
  "_sigma\030\006 \001(\001\"e\n\017AngularVelocity\022\t\n\001x\030\001 \001"
  "(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\017\n\007x_sigma\030\004 \001("
  "\001\022\017\n\007y_sigma\030\005 \001(\001\022\017\n\007z_sigma\030\006 \001(\001\"H\n\013O"
  "rientation\022\t\n\001w\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 "
  "\001(\001\022\t\n\001z\030\004 \001(\001\022\r\n\005sigma\030\005 \001(\001\"\267\001\n\013Global"
  "State\022-\n\010position\030\001 \001(\0132\033.LpgfSlamSerial"
  "ize.Position\0223\n\013orientation\030\002 \001(\0132\036.Lpgf"
  "SlamSerialize.Orientation\022-\n\010velocity\030\003 "
  "\001(\0132\033.LpgfSlamSerialize.Velocity\022\025\n\rvelo"
  "cityValid\030\004 \001(\010\"[\n\021GlobalStateInTime\022\021\n\t"
  "timeStamp\030\001 \001(\003\0223\n\013globalState\030\002 \001(\0132\036.L"
  "pgfSlamSerialize.GlobalState\"}\n\027TrackerC"
  "oordinateSystem\022-\n\010position\030\001 \001(\0132\033.Lpgf"
  "SlamSerialize.Position\0223\n\013orientation\030\002 "
  "\001(\0132\036.LpgfSlamSerialize.Orientation\"\271\003\n\013"
  "CameraImage\022\021\n\ttimeStamp\030\001 \001(\003\022\022\n\ndataNu"
  "mber\030\002 \001(\003\022\021\n\timageData\030\003 \001(\014\0222\n\nstate_o"
  "dom\030\004 \001(\0132\036.LpgfSlamSerialize.GlobalStat"
  "e\0221\n\tstate_map\030\005 \001(\0132\036.LpgfSlamSerialize"
  ".GlobalState\022\024\n\014cameraNumber\030\006 \001(\005\022\030\n\020im"
  "ageData_second\030\007 \001(\014\022\033\n\023cameraNumber_sec"
  "ond\030\010 \001(\005\022=\n\timageBase\030\t \001(\0132*.LpgfSlamS"
  "erialize.TrackerCoordinateSystem\022D\n\020imag"
  "eBase_second\030\n \001(\0132*.LpgfSlamSerialize.T"
  "rackerCoordinateSystem\022\033\n\023hasGlobalState"
  "_odom\030\013 \001(\010\022\032\n\022hasGlobalState_map\030\014 \001(\010\""
  "~\n\tSensorImu\022\021\n\ttimesTamp\030\001 \001(\003\022,\n\003acc\030\002"
  " \001(\0132\037.LpgfSlamSerialize.Acceleration\0220\n"
  "\004gyro\030\003 \001(\0132\".LpgfSlamSerialize.AngularV"
  "elocity\"n\n\021SensorGlobalState\022\021\n\ttimesTam"
  "p\030\001 \001(\003\0223\n\013globalState\030\002 \001(\0132\036.LpgfSlamS"
  "erialize.GlobalState\022\021\n\treference\030\003 \001(\010\""
  "\321\001\n\rSensorFeature\022\021\n\ttimeStamp\030\001 \001(\003\022\024\n\014"
  "lastObserved\030\002 \001(\003\022-\n\010position\030\003 \001(\0132\033.L"
  "pgfSlamSerialize.Position\022<\n\027closestKeyf"
  "ramePosition\030\004 \001(\0132\033.LpgfSlamSerialize.P"
  "osition\022\030\n\020observationCount\030\005 \001(\003\022\020\n\010anc"
  "horId\030\006 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SlamSerialize_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SlamSerialize_2eproto_sccs[12] = {
  &scc_info_Acceleration_SlamSerialize_2eproto.base,
  &scc_info_AngularVelocity_SlamSerialize_2eproto.base,
  &scc_info_CameraImage_SlamSerialize_2eproto.base,
  &scc_info_GlobalState_SlamSerialize_2eproto.base,
  &scc_info_GlobalStateInTime_SlamSerialize_2eproto.base,
  &scc_info_Orientation_SlamSerialize_2eproto.base,
  &scc_info_Position_SlamSerialize_2eproto.base,
  &scc_info_SensorFeature_SlamSerialize_2eproto.base,
  &scc_info_SensorGlobalState_SlamSerialize_2eproto.base,
  &scc_info_SensorImu_SlamSerialize_2eproto.base,
  &scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto.base,
  &scc_info_Velocity_SlamSerialize_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SlamSerialize_2eproto_once;
static bool descriptor_table_SlamSerialize_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SlamSerialize_2eproto = {
  &descriptor_table_SlamSerialize_2eproto_initialized, descriptor_table_protodef_SlamSerialize_2eproto, "SlamSerialize.proto", 1819,
  &descriptor_table_SlamSerialize_2eproto_once, descriptor_table_SlamSerialize_2eproto_sccs, descriptor_table_SlamSerialize_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_SlamSerialize_2eproto::offsets,
  file_level_metadata_SlamSerialize_2eproto, 12, file_level_enum_descriptors_SlamSerialize_2eproto, file_level_service_descriptors_SlamSerialize_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SlamSerialize_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SlamSerialize_2eproto), true);
namespace LpgfSlamSerialize {

// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_sigma_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_sigma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          x_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          y_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z_sigma = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          z_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.Position)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x_sigma = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_sigma = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_sigma = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->x_sigma(), output);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->y_sigma(), output);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->z_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.Position)
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->x_sigma(), target);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->y_sigma(), target);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->z_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.x_sigma() <= 0 && from.x_sigma() >= 0)) {
    set_x_sigma(from.x_sigma());
  }
  if (!(from.y_sigma() <= 0 && from.y_sigma() >= 0)) {
    set_y_sigma(from.y_sigma());
  }
  if (!(from.z_sigma() <= 0 && from.z_sigma() >= 0)) {
    set_z_sigma(from.z_sigma());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(x_sigma_, other->x_sigma_);
  swap(y_sigma_, other->y_sigma_);
  swap(z_sigma_, other->z_sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acceleration::InitAsDefaultInstance() {
}
class Acceleration::_Internal {
 public:
};

Acceleration::Acceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.Acceleration)
}
Acceleration::Acceleration(const Acceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_sigma_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.Acceleration)
}

void Acceleration::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
}

Acceleration::~Acceleration() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.Acceleration)
  SharedDtor();
}

void Acceleration::SharedDtor() {
}

void Acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acceleration& Acceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acceleration_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Acceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_sigma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          x_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          y_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z_sigma = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          z_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Acceleration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.Acceleration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x_sigma = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_sigma = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_sigma = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.Acceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.Acceleration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Acceleration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->x_sigma(), output);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->y_sigma(), output);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->z_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.Acceleration)
}

::PROTOBUF_NAMESPACE_ID::uint8* Acceleration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->x_sigma(), target);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->y_sigma(), target);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->z_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.Acceleration)
  return target;
}

size_t Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.Acceleration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Acceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.Acceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.Acceleration)
    MergeFrom(*source);
  }
}

void Acceleration::MergeFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.x_sigma() <= 0 && from.x_sigma() >= 0)) {
    set_x_sigma(from.x_sigma());
  }
  if (!(from.y_sigma() <= 0 && from.y_sigma() >= 0)) {
    set_y_sigma(from.y_sigma());
  }
  if (!(from.z_sigma() <= 0 && from.z_sigma() >= 0)) {
    set_z_sigma(from.z_sigma());
  }
}

void Acceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acceleration::CopyFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acceleration::IsInitialized() const {
  return true;
}

void Acceleration::InternalSwap(Acceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(x_sigma_, other->x_sigma_);
  swap(y_sigma_, other->y_sigma_);
  swap(z_sigma_, other->z_sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Velocity::InitAsDefaultInstance() {
}
class Velocity::_Internal {
 public:
};

Velocity::Velocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_sigma_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.Velocity)
}

void Velocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.Velocity)
  SharedDtor();
}

void Velocity::SharedDtor() {
}

void Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Velocity& Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Velocity_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_sigma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          x_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          y_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z_sigma = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          z_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Velocity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.Velocity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x_sigma = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_sigma = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_sigma = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.Velocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.Velocity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Velocity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->x_sigma(), output);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->y_sigma(), output);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->z_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.Velocity)
}

::PROTOBUF_NAMESPACE_ID::uint8* Velocity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->x_sigma(), target);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->y_sigma(), target);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->z_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.Velocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.x_sigma() <= 0 && from.x_sigma() >= 0)) {
    set_x_sigma(from.x_sigma());
  }
  if (!(from.y_sigma() <= 0 && from.y_sigma() >= 0)) {
    set_y_sigma(from.y_sigma());
  }
  if (!(from.z_sigma() <= 0 && from.z_sigma() >= 0)) {
    set_z_sigma(from.z_sigma());
  }
}

void Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(x_sigma_, other->x_sigma_);
  swap(y_sigma_, other->y_sigma_);
  swap(z_sigma_, other->z_sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularVelocity::InitAsDefaultInstance() {
}
class AngularVelocity::_Internal {
 public:
};

AngularVelocity::AngularVelocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.AngularVelocity)
}
AngularVelocity::AngularVelocity(const AngularVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_sigma_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.AngularVelocity)
}

void AngularVelocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
}

AngularVelocity::~AngularVelocity() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.AngularVelocity)
  SharedDtor();
}

void AngularVelocity::SharedDtor() {
}

void AngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularVelocity& AngularVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularVelocity_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_sigma_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AngularVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_sigma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          x_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          y_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z_sigma = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          z_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AngularVelocity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.AngularVelocity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x_sigma = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_sigma = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_sigma = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.AngularVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.AngularVelocity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AngularVelocity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->x_sigma(), output);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->y_sigma(), output);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->z_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.AngularVelocity)
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->x_sigma(), target);
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->y_sigma(), target);
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->z_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.AngularVelocity)
  return target;
}

size_t AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.AngularVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_sigma = 4;
  if (!(this->x_sigma() <= 0 && this->x_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_sigma = 5;
  if (!(this->y_sigma() <= 0 && this->y_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  // double z_sigma = 6;
  if (!(this->z_sigma() <= 0 && this->z_sigma() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.AngularVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.AngularVelocity)
    MergeFrom(*source);
  }
}

void AngularVelocity::MergeFrom(const AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.x_sigma() <= 0 && from.x_sigma() >= 0)) {
    set_x_sigma(from.x_sigma());
  }
  if (!(from.y_sigma() <= 0 && from.y_sigma() >= 0)) {
    set_y_sigma(from.y_sigma());
  }
  if (!(from.z_sigma() <= 0 && from.z_sigma() >= 0)) {
    set_z_sigma(from.z_sigma());
  }
}

void AngularVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocity::CopyFrom(const AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocity::IsInitialized() const {
  return true;
}

void AngularVelocity::InternalSwap(AngularVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(x_sigma_, other->x_sigma_);
  swap(y_sigma_, other->y_sigma_);
  swap(z_sigma_, other->z_sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
class Orientation::_Internal {
 public:
};

Orientation::Orientation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&w_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&w_)) + sizeof(sigma_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Orientation& Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Orientation_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&w_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Orientation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.Orientation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double w = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sigma = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.Orientation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Orientation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->w(), output);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }

  // double sigma = 5;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.Orientation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->w(), target);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }

  // double sigma = 5;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.Orientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double sigma = 5;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    set_w(from.w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    set_sigma(from.sigma());
  }
}

void Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalState::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_GlobalState_default_instance_._instance.get_mutable()->position_ = const_cast< ::LpgfSlamSerialize::Position*>(
      ::LpgfSlamSerialize::Position::internal_default_instance());
  ::LpgfSlamSerialize::_GlobalState_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::LpgfSlamSerialize::Orientation*>(
      ::LpgfSlamSerialize::Orientation::internal_default_instance());
  ::LpgfSlamSerialize::_GlobalState_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::LpgfSlamSerialize::Velocity*>(
      ::LpgfSlamSerialize::Velocity::internal_default_instance());
}
class GlobalState::_Internal {
 public:
  static const ::LpgfSlamSerialize::Position& position(const GlobalState* msg);
  static const ::LpgfSlamSerialize::Orientation& orientation(const GlobalState* msg);
  static const ::LpgfSlamSerialize::Velocity& velocity(const GlobalState* msg);
};

const ::LpgfSlamSerialize::Position&
GlobalState::_Internal::position(const GlobalState* msg) {
  return *msg->position_;
}
const ::LpgfSlamSerialize::Orientation&
GlobalState::_Internal::orientation(const GlobalState* msg) {
  return *msg->orientation_;
}
const ::LpgfSlamSerialize::Velocity&
GlobalState::_Internal::velocity(const GlobalState* msg) {
  return *msg->velocity_;
}
GlobalState::GlobalState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.GlobalState)
}
GlobalState::GlobalState(const GlobalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::LpgfSlamSerialize::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::LpgfSlamSerialize::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::LpgfSlamSerialize::Velocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  velocityvalid_ = from.velocityvalid_;
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.GlobalState)
}

void GlobalState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalState_SlamSerialize_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocityvalid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(velocityvalid_));
}

GlobalState::~GlobalState() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.GlobalState)
  SharedDtor();
}

void GlobalState::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete velocity_;
}

void GlobalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalState& GlobalState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalState_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void GlobalState::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.GlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  velocityvalid_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LpgfSlamSerialize.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Velocity velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool velocityValid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          velocityvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.GlobalState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LpgfSlamSerialize.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Orientation orientation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Velocity velocity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool velocityValid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocityvalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.GlobalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.GlobalState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.GlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::orientation(this), output);
  }

  // .LpgfSlamSerialize.Velocity velocity = 3;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::velocity(this), output);
  }

  // bool velocityValid = 4;
  if (this->velocityvalid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->velocityvalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.GlobalState)
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.GlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::orientation(this), target);
  }

  // .LpgfSlamSerialize.Velocity velocity = 3;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::velocity(this), target);
  }

  // bool velocityValid = 4;
  if (this->velocityvalid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->velocityvalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.GlobalState)
  return target;
}

size_t GlobalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.GlobalState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .LpgfSlamSerialize.Velocity velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // bool velocityValid = 4;
  if (this->velocityvalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.GlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.GlobalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.GlobalState)
    MergeFrom(*source);
  }
}

void GlobalState::MergeFrom(const GlobalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.GlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::LpgfSlamSerialize::Position::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::LpgfSlamSerialize::Orientation::MergeFrom(from.orientation());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::LpgfSlamSerialize::Velocity::MergeFrom(from.velocity());
  }
  if (from.velocityvalid() != 0) {
    set_velocityvalid(from.velocityvalid());
  }
}

void GlobalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.GlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalState::CopyFrom(const GlobalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.GlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalState::IsInitialized() const {
  return true;
}

void GlobalState::InternalSwap(GlobalState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(velocity_, other->velocity_);
  swap(velocityvalid_, other->velocityvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalStateInTime::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_GlobalStateInTime_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::LpgfSlamSerialize::GlobalState*>(
      ::LpgfSlamSerialize::GlobalState::internal_default_instance());
}
class GlobalStateInTime::_Internal {
 public:
  static const ::LpgfSlamSerialize::GlobalState& globalstate(const GlobalStateInTime* msg);
};

const ::LpgfSlamSerialize::GlobalState&
GlobalStateInTime::_Internal::globalstate(const GlobalStateInTime* msg) {
  return *msg->globalstate_;
}
GlobalStateInTime::GlobalStateInTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.GlobalStateInTime)
}
GlobalStateInTime::GlobalStateInTime(const GlobalStateInTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_globalstate()) {
    globalstate_ = new ::LpgfSlamSerialize::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.GlobalStateInTime)
}

void GlobalStateInTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalStateInTime_SlamSerialize_2eproto.base);
  ::memset(&globalstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&globalstate_)) + sizeof(timestamp_));
}

GlobalStateInTime::~GlobalStateInTime() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.GlobalStateInTime)
  SharedDtor();
}

void GlobalStateInTime::SharedDtor() {
  if (this != internal_default_instance()) delete globalstate_;
}

void GlobalStateInTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalStateInTime& GlobalStateInTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalStateInTime_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void GlobalStateInTime::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.GlobalStateInTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && globalstate_ != nullptr) {
    delete globalstate_;
  }
  globalstate_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalStateInTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.GlobalState globalState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_globalstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalStateInTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.GlobalStateInTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.GlobalState globalState = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_globalstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.GlobalStateInTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.GlobalStateInTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalStateInTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.GlobalStateInTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::globalstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.GlobalStateInTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalStateInTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.GlobalStateInTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::globalstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.GlobalStateInTime)
  return target;
}

size_t GlobalStateInTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.GlobalStateInTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalstate_);
  }

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalStateInTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.GlobalStateInTime)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalStateInTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalStateInTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.GlobalStateInTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.GlobalStateInTime)
    MergeFrom(*source);
  }
}

void GlobalStateInTime::MergeFrom(const GlobalStateInTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.GlobalStateInTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_globalstate()) {
    mutable_globalstate()->::LpgfSlamSerialize::GlobalState::MergeFrom(from.globalstate());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void GlobalStateInTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.GlobalStateInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStateInTime::CopyFrom(const GlobalStateInTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.GlobalStateInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStateInTime::IsInitialized() const {
  return true;
}

void GlobalStateInTime::InternalSwap(GlobalStateInTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(globalstate_, other->globalstate_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalStateInTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackerCoordinateSystem::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_._instance.get_mutable()->position_ = const_cast< ::LpgfSlamSerialize::Position*>(
      ::LpgfSlamSerialize::Position::internal_default_instance());
  ::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::LpgfSlamSerialize::Orientation*>(
      ::LpgfSlamSerialize::Orientation::internal_default_instance());
}
class TrackerCoordinateSystem::_Internal {
 public:
  static const ::LpgfSlamSerialize::Position& position(const TrackerCoordinateSystem* msg);
  static const ::LpgfSlamSerialize::Orientation& orientation(const TrackerCoordinateSystem* msg);
};

const ::LpgfSlamSerialize::Position&
TrackerCoordinateSystem::_Internal::position(const TrackerCoordinateSystem* msg) {
  return *msg->position_;
}
const ::LpgfSlamSerialize::Orientation&
TrackerCoordinateSystem::_Internal::orientation(const TrackerCoordinateSystem* msg) {
  return *msg->orientation_;
}
TrackerCoordinateSystem::TrackerCoordinateSystem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.TrackerCoordinateSystem)
}
TrackerCoordinateSystem::TrackerCoordinateSystem(const TrackerCoordinateSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::LpgfSlamSerialize::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::LpgfSlamSerialize::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.TrackerCoordinateSystem)
}

void TrackerCoordinateSystem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

TrackerCoordinateSystem::~TrackerCoordinateSystem() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.TrackerCoordinateSystem)
  SharedDtor();
}

void TrackerCoordinateSystem::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void TrackerCoordinateSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackerCoordinateSystem& TrackerCoordinateSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackerCoordinateSystem_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void TrackerCoordinateSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackerCoordinateSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LpgfSlamSerialize.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackerCoordinateSystem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LpgfSlamSerialize.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Orientation orientation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.TrackerCoordinateSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.TrackerCoordinateSystem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackerCoordinateSystem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.TrackerCoordinateSystem)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackerCoordinateSystem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.TrackerCoordinateSystem)
  return target;
}

size_t TrackerCoordinateSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .LpgfSlamSerialize.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerCoordinateSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerCoordinateSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackerCoordinateSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.TrackerCoordinateSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.TrackerCoordinateSystem)
    MergeFrom(*source);
  }
}

void TrackerCoordinateSystem::MergeFrom(const TrackerCoordinateSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::LpgfSlamSerialize::Position::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::LpgfSlamSerialize::Orientation::MergeFrom(from.orientation());
  }
}

void TrackerCoordinateSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerCoordinateSystem::CopyFrom(const TrackerCoordinateSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.TrackerCoordinateSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerCoordinateSystem::IsInitialized() const {
  return true;
}

void TrackerCoordinateSystem::InternalSwap(TrackerCoordinateSystem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerCoordinateSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraImage::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_CameraImage_default_instance_._instance.get_mutable()->state_odom_ = const_cast< ::LpgfSlamSerialize::GlobalState*>(
      ::LpgfSlamSerialize::GlobalState::internal_default_instance());
  ::LpgfSlamSerialize::_CameraImage_default_instance_._instance.get_mutable()->state_map_ = const_cast< ::LpgfSlamSerialize::GlobalState*>(
      ::LpgfSlamSerialize::GlobalState::internal_default_instance());
  ::LpgfSlamSerialize::_CameraImage_default_instance_._instance.get_mutable()->imagebase_ = const_cast< ::LpgfSlamSerialize::TrackerCoordinateSystem*>(
      ::LpgfSlamSerialize::TrackerCoordinateSystem::internal_default_instance());
  ::LpgfSlamSerialize::_CameraImage_default_instance_._instance.get_mutable()->imagebase_second_ = const_cast< ::LpgfSlamSerialize::TrackerCoordinateSystem*>(
      ::LpgfSlamSerialize::TrackerCoordinateSystem::internal_default_instance());
}
class CameraImage::_Internal {
 public:
  static const ::LpgfSlamSerialize::GlobalState& state_odom(const CameraImage* msg);
  static const ::LpgfSlamSerialize::GlobalState& state_map(const CameraImage* msg);
  static const ::LpgfSlamSerialize::TrackerCoordinateSystem& imagebase(const CameraImage* msg);
  static const ::LpgfSlamSerialize::TrackerCoordinateSystem& imagebase_second(const CameraImage* msg);
};

const ::LpgfSlamSerialize::GlobalState&
CameraImage::_Internal::state_odom(const CameraImage* msg) {
  return *msg->state_odom_;
}
const ::LpgfSlamSerialize::GlobalState&
CameraImage::_Internal::state_map(const CameraImage* msg) {
  return *msg->state_map_;
}
const ::LpgfSlamSerialize::TrackerCoordinateSystem&
CameraImage::_Internal::imagebase(const CameraImage* msg) {
  return *msg->imagebase_;
}
const ::LpgfSlamSerialize::TrackerCoordinateSystem&
CameraImage::_Internal::imagebase_second(const CameraImage* msg) {
  return *msg->imagebase_second_;
}
CameraImage::CameraImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.CameraImage)
}
CameraImage::CameraImage(const CameraImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.imagedata().empty()) {
    imagedata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  imagedata_second_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.imagedata_second().empty()) {
    imagedata_second_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imagedata_second_);
  }
  if (from.has_state_odom()) {
    state_odom_ = new ::LpgfSlamSerialize::GlobalState(*from.state_odom_);
  } else {
    state_odom_ = nullptr;
  }
  if (from.has_state_map()) {
    state_map_ = new ::LpgfSlamSerialize::GlobalState(*from.state_map_);
  } else {
    state_map_ = nullptr;
  }
  if (from.has_imagebase()) {
    imagebase_ = new ::LpgfSlamSerialize::TrackerCoordinateSystem(*from.imagebase_);
  } else {
    imagebase_ = nullptr;
  }
  if (from.has_imagebase_second()) {
    imagebase_second_ = new ::LpgfSlamSerialize::TrackerCoordinateSystem(*from.imagebase_second_);
  } else {
    imagebase_second_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasglobalstate_map_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(hasglobalstate_map_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.CameraImage)
}

void CameraImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraImage_SlamSerialize_2eproto.base);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_second_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_odom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasglobalstate_map_) -
      reinterpret_cast<char*>(&state_odom_)) + sizeof(hasglobalstate_map_));
}

CameraImage::~CameraImage() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.CameraImage)
  SharedDtor();
}

void CameraImage::SharedDtor() {
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_second_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_odom_;
  if (this != internal_default_instance()) delete state_map_;
  if (this != internal_default_instance()) delete imagebase_;
  if (this != internal_default_instance()) delete imagebase_second_;
}

void CameraImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraImage& CameraImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraImage_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void CameraImage::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.CameraImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imagedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_second_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && state_odom_ != nullptr) {
    delete state_odom_;
  }
  state_odom_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_map_ != nullptr) {
    delete state_map_;
  }
  state_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imagebase_ != nullptr) {
    delete imagebase_;
  }
  imagebase_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imagebase_second_ != nullptr) {
    delete imagebase_second_;
  }
  imagebase_second_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasglobalstate_map_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hasglobalstate_map_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dataNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          datanumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_imagedata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.GlobalState state_odom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_state_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.GlobalState state_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_state_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cameraNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cameranumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageData_second = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_imagedata_second(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cameraNumber_second = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cameranumber_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_imagebase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_imagebase_second(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasGlobalState_odom = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hasglobalstate_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasGlobalState_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hasglobalstate_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraImage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.CameraImage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dataNumber = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datanumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes imageData = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.GlobalState state_odom = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_state_odom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.GlobalState state_map = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_state_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cameraNumber = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameranumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes imageData_second = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cameraNumber_second = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameranumber_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imagebase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imagebase_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasGlobalState_odom = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasglobalstate_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasGlobalState_map = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasglobalstate_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.CameraImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.CameraImage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraImage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.CameraImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 dataNumber = 2;
  if (this->datanumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->datanumber(), output);
  }

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->imagedata(), output);
  }

  // .LpgfSlamSerialize.GlobalState state_odom = 4;
  if (this->has_state_odom()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::state_odom(this), output);
  }

  // .LpgfSlamSerialize.GlobalState state_map = 5;
  if (this->has_state_map()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::state_map(this), output);
  }

  // int32 cameraNumber = 6;
  if (this->cameranumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->cameranumber(), output);
  }

  // bytes imageData_second = 7;
  if (this->imagedata_second().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->imagedata_second(), output);
  }

  // int32 cameraNumber_second = 8;
  if (this->cameranumber_second() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->cameranumber_second(), output);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
  if (this->has_imagebase()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::imagebase(this), output);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
  if (this->has_imagebase_second()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::imagebase_second(this), output);
  }

  // bool hasGlobalState_odom = 11;
  if (this->hasglobalstate_odom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->hasglobalstate_odom(), output);
  }

  // bool hasGlobalState_map = 12;
  if (this->hasglobalstate_map() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->hasglobalstate_map(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.CameraImage)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraImage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.CameraImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 dataNumber = 2;
  if (this->datanumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->datanumber(), target);
  }

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->imagedata(), target);
  }

  // .LpgfSlamSerialize.GlobalState state_odom = 4;
  if (this->has_state_odom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::state_odom(this), target);
  }

  // .LpgfSlamSerialize.GlobalState state_map = 5;
  if (this->has_state_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::state_map(this), target);
  }

  // int32 cameraNumber = 6;
  if (this->cameranumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->cameranumber(), target);
  }

  // bytes imageData_second = 7;
  if (this->imagedata_second().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->imagedata_second(), target);
  }

  // int32 cameraNumber_second = 8;
  if (this->cameranumber_second() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->cameranumber_second(), target);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
  if (this->has_imagebase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::imagebase(this), target);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
  if (this->has_imagebase_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::imagebase_second(this), target);
  }

  // bool hasGlobalState_odom = 11;
  if (this->hasglobalstate_odom() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->hasglobalstate_odom(), target);
  }

  // bool hasGlobalState_map = 12;
  if (this->hasglobalstate_map() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->hasglobalstate_map(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.CameraImage)
  return target;
}

size_t CameraImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.CameraImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  // bytes imageData_second = 7;
  if (this->imagedata_second().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->imagedata_second());
  }

  // .LpgfSlamSerialize.GlobalState state_odom = 4;
  if (this->has_state_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_odom_);
  }

  // .LpgfSlamSerialize.GlobalState state_map = 5;
  if (this->has_state_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_map_);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
  if (this->has_imagebase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagebase_);
  }

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
  if (this->has_imagebase_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagebase_second_);
  }

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 dataNumber = 2;
  if (this->datanumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->datanumber());
  }

  // int32 cameraNumber = 6;
  if (this->cameranumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cameranumber());
  }

  // int32 cameraNumber_second = 8;
  if (this->cameranumber_second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cameranumber_second());
  }

  // bool hasGlobalState_odom = 11;
  if (this->hasglobalstate_odom() != 0) {
    total_size += 1 + 1;
  }

  // bool hasGlobalState_map = 12;
  if (this->hasglobalstate_map() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.CameraImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.CameraImage)
    MergeFrom(*source);
  }
}

void CameraImage::MergeFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imagedata().size() > 0) {

    imagedata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  if (from.imagedata_second().size() > 0) {

    imagedata_second_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imagedata_second_);
  }
  if (from.has_state_odom()) {
    mutable_state_odom()->::LpgfSlamSerialize::GlobalState::MergeFrom(from.state_odom());
  }
  if (from.has_state_map()) {
    mutable_state_map()->::LpgfSlamSerialize::GlobalState::MergeFrom(from.state_map());
  }
  if (from.has_imagebase()) {
    mutable_imagebase()->::LpgfSlamSerialize::TrackerCoordinateSystem::MergeFrom(from.imagebase());
  }
  if (from.has_imagebase_second()) {
    mutable_imagebase_second()->::LpgfSlamSerialize::TrackerCoordinateSystem::MergeFrom(from.imagebase_second());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.datanumber() != 0) {
    set_datanumber(from.datanumber());
  }
  if (from.cameranumber() != 0) {
    set_cameranumber(from.cameranumber());
  }
  if (from.cameranumber_second() != 0) {
    set_cameranumber_second(from.cameranumber_second());
  }
  if (from.hasglobalstate_odom() != 0) {
    set_hasglobalstate_odom(from.hasglobalstate_odom());
  }
  if (from.hasglobalstate_map() != 0) {
    set_hasglobalstate_map(from.hasglobalstate_map());
  }
}

void CameraImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraImage::CopyFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraImage::IsInitialized() const {
  return true;
}

void CameraImage::InternalSwap(CameraImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imagedata_second_.Swap(&other->imagedata_second_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_odom_, other->state_odom_);
  swap(state_map_, other->state_map_);
  swap(imagebase_, other->imagebase_);
  swap(imagebase_second_, other->imagebase_second_);
  swap(timestamp_, other->timestamp_);
  swap(datanumber_, other->datanumber_);
  swap(cameranumber_, other->cameranumber_);
  swap(cameranumber_second_, other->cameranumber_second_);
  swap(hasglobalstate_odom_, other->hasglobalstate_odom_);
  swap(hasglobalstate_map_, other->hasglobalstate_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorImu::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_SensorImu_default_instance_._instance.get_mutable()->acc_ = const_cast< ::LpgfSlamSerialize::Acceleration*>(
      ::LpgfSlamSerialize::Acceleration::internal_default_instance());
  ::LpgfSlamSerialize::_SensorImu_default_instance_._instance.get_mutable()->gyro_ = const_cast< ::LpgfSlamSerialize::AngularVelocity*>(
      ::LpgfSlamSerialize::AngularVelocity::internal_default_instance());
}
class SensorImu::_Internal {
 public:
  static const ::LpgfSlamSerialize::Acceleration& acc(const SensorImu* msg);
  static const ::LpgfSlamSerialize::AngularVelocity& gyro(const SensorImu* msg);
};

const ::LpgfSlamSerialize::Acceleration&
SensorImu::_Internal::acc(const SensorImu* msg) {
  return *msg->acc_;
}
const ::LpgfSlamSerialize::AngularVelocity&
SensorImu::_Internal::gyro(const SensorImu* msg) {
  return *msg->gyro_;
}
SensorImu::SensorImu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.SensorImu)
}
SensorImu::SensorImu(const SensorImu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_acc()) {
    acc_ = new ::LpgfSlamSerialize::Acceleration(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from.has_gyro()) {
    gyro_ = new ::LpgfSlamSerialize::AngularVelocity(*from.gyro_);
  } else {
    gyro_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.SensorImu)
}

void SensorImu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorImu_SlamSerialize_2eproto.base);
  ::memset(&acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(timestamp_));
}

SensorImu::~SensorImu() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.SensorImu)
  SharedDtor();
}

void SensorImu::SharedDtor() {
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete gyro_;
}

void SensorImu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorImu& SensorImu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorImu_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void SensorImu::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.SensorImu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gyro_ != nullptr) {
    delete gyro_;
  }
  gyro_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorImu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timesTamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Acceleration acc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.AngularVelocity gyro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_gyro(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorImu::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.SensorImu)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timesTamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Acceleration acc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.AngularVelocity gyro = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gyro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.SensorImu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.SensorImu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorImu::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.SensorImu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .LpgfSlamSerialize.Acceleration acc = 2;
  if (this->has_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::acc(this), output);
  }

  // .LpgfSlamSerialize.AngularVelocity gyro = 3;
  if (this->has_gyro()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::gyro(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.SensorImu)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorImu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.SensorImu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .LpgfSlamSerialize.Acceleration acc = 2;
  if (this->has_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::acc(this), target);
  }

  // .LpgfSlamSerialize.AngularVelocity gyro = 3;
  if (this->has_gyro()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::gyro(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.SensorImu)
  return target;
}

size_t SensorImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.SensorImu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LpgfSlamSerialize.Acceleration acc = 2;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // .LpgfSlamSerialize.AngularVelocity gyro = 3;
  if (this->has_gyro()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyro_);
  }

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorImu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.SensorImu)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorImu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorImu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.SensorImu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.SensorImu)
    MergeFrom(*source);
  }
}

void SensorImu::MergeFrom(const SensorImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.SensorImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acc()) {
    mutable_acc()->::LpgfSlamSerialize::Acceleration::MergeFrom(from.acc());
  }
  if (from.has_gyro()) {
    mutable_gyro()->::LpgfSlamSerialize::AngularVelocity::MergeFrom(from.gyro());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SensorImu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.SensorImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorImu::CopyFrom(const SensorImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.SensorImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorImu::IsInitialized() const {
  return true;
}

void SensorImu::InternalSwap(SensorImu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc_, other->acc_);
  swap(gyro_, other->gyro_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorImu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorGlobalState::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_SensorGlobalState_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::LpgfSlamSerialize::GlobalState*>(
      ::LpgfSlamSerialize::GlobalState::internal_default_instance());
}
class SensorGlobalState::_Internal {
 public:
  static const ::LpgfSlamSerialize::GlobalState& globalstate(const SensorGlobalState* msg);
};

const ::LpgfSlamSerialize::GlobalState&
SensorGlobalState::_Internal::globalstate(const SensorGlobalState* msg) {
  return *msg->globalstate_;
}
SensorGlobalState::SensorGlobalState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.SensorGlobalState)
}
SensorGlobalState::SensorGlobalState(const SensorGlobalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_globalstate()) {
    globalstate_ = new ::LpgfSlamSerialize::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(reference_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.SensorGlobalState)
}

void SensorGlobalState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorGlobalState_SlamSerialize_2eproto.base);
  ::memset(&globalstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&globalstate_)) + sizeof(reference_));
}

SensorGlobalState::~SensorGlobalState() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.SensorGlobalState)
  SharedDtor();
}

void SensorGlobalState::SharedDtor() {
  if (this != internal_default_instance()) delete globalstate_;
}

void SensorGlobalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorGlobalState& SensorGlobalState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorGlobalState_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void SensorGlobalState::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.SensorGlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && globalstate_ != nullptr) {
    delete globalstate_;
  }
  globalstate_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(reference_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorGlobalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timesTamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.GlobalState globalState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_globalstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorGlobalState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.SensorGlobalState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timesTamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.GlobalState globalState = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_globalstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.SensorGlobalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.SensorGlobalState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorGlobalState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.SensorGlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::globalstate(this), output);
  }

  // bool reference = 3;
  if (this->reference() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.SensorGlobalState)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorGlobalState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.SensorGlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::globalstate(this), target);
  }

  // bool reference = 3;
  if (this->reference() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.SensorGlobalState)
  return target;
}

size_t SensorGlobalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.SensorGlobalState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LpgfSlamSerialize.GlobalState globalState = 2;
  if (this->has_globalstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalstate_);
  }

  // int64 timesTamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // bool reference = 3;
  if (this->reference() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorGlobalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.SensorGlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorGlobalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorGlobalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.SensorGlobalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.SensorGlobalState)
    MergeFrom(*source);
  }
}

void SensorGlobalState::MergeFrom(const SensorGlobalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.SensorGlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_globalstate()) {
    mutable_globalstate()->::LpgfSlamSerialize::GlobalState::MergeFrom(from.globalstate());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.reference() != 0) {
    set_reference(from.reference());
  }
}

void SensorGlobalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.SensorGlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorGlobalState::CopyFrom(const SensorGlobalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.SensorGlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorGlobalState::IsInitialized() const {
  return true;
}

void SensorGlobalState::InternalSwap(SensorGlobalState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(globalstate_, other->globalstate_);
  swap(timestamp_, other->timestamp_);
  swap(reference_, other->reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorGlobalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorFeature::InitAsDefaultInstance() {
  ::LpgfSlamSerialize::_SensorFeature_default_instance_._instance.get_mutable()->position_ = const_cast< ::LpgfSlamSerialize::Position*>(
      ::LpgfSlamSerialize::Position::internal_default_instance());
  ::LpgfSlamSerialize::_SensorFeature_default_instance_._instance.get_mutable()->closestkeyframeposition_ = const_cast< ::LpgfSlamSerialize::Position*>(
      ::LpgfSlamSerialize::Position::internal_default_instance());
}
class SensorFeature::_Internal {
 public:
  static const ::LpgfSlamSerialize::Position& position(const SensorFeature* msg);
  static const ::LpgfSlamSerialize::Position& closestkeyframeposition(const SensorFeature* msg);
};

const ::LpgfSlamSerialize::Position&
SensorFeature::_Internal::position(const SensorFeature* msg) {
  return *msg->position_;
}
const ::LpgfSlamSerialize::Position&
SensorFeature::_Internal::closestkeyframeposition(const SensorFeature* msg) {
  return *msg->closestkeyframeposition_;
}
SensorFeature::SensorFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LpgfSlamSerialize.SensorFeature)
}
SensorFeature::SensorFeature(const SensorFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.anchorid().empty()) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.has_position()) {
    position_ = new ::LpgfSlamSerialize::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_closestkeyframeposition()) {
    closestkeyframeposition_ = new ::LpgfSlamSerialize::Position(*from.closestkeyframeposition_);
  } else {
    closestkeyframeposition_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&observationcount_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(observationcount_));
  // @@protoc_insertion_point(copy_constructor:LpgfSlamSerialize.SensorFeature)
}

void SensorFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorFeature_SlamSerialize_2eproto.base);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&observationcount_) -
      reinterpret_cast<char*>(&position_)) + sizeof(observationcount_));
}

SensorFeature::~SensorFeature() {
  // @@protoc_insertion_point(destructor:LpgfSlamSerialize.SensorFeature)
  SharedDtor();
}

void SensorFeature::SharedDtor() {
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete closestkeyframeposition_;
}

void SensorFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorFeature& SensorFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorFeature_SlamSerialize_2eproto.base);
  return *internal_default_instance();
}


void SensorFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:LpgfSlamSerialize.SensorFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closestkeyframeposition_ != nullptr) {
    delete closestkeyframeposition_;
  }
  closestkeyframeposition_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&observationcount_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(observationcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastObserved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lastobserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_closestkeyframeposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 observationCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          observationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string anchorId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "LpgfSlamSerialize.SensorFeature.anchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorFeature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LpgfSlamSerialize.SensorFeature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lastObserved = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastobserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Position position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_closestkeyframeposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 observationCount = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &observationcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string anchorId = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LpgfSlamSerialize.SensorFeature.anchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LpgfSlamSerialize.SensorFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LpgfSlamSerialize.SensorFeature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorFeature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LpgfSlamSerialize.SensorFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 lastObserved = 2;
  if (this->lastobserved() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->lastobserved(), output);
  }

  // .LpgfSlamSerialize.Position position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
  if (this->has_closestkeyframeposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::closestkeyframeposition(this), output);
  }

  // int64 observationCount = 5;
  if (this->observationcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->observationcount(), output);
  }

  // string anchorId = 6;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LpgfSlamSerialize.SensorFeature.anchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->anchorid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LpgfSlamSerialize.SensorFeature)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorFeature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LpgfSlamSerialize.SensorFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 lastObserved = 2;
  if (this->lastobserved() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->lastobserved(), target);
  }

  // .LpgfSlamSerialize.Position position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
  if (this->has_closestkeyframeposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::closestkeyframeposition(this), target);
  }

  // int64 observationCount = 5;
  if (this->observationcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->observationcount(), target);
  }

  // string anchorId = 6;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LpgfSlamSerialize.SensorFeature.anchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->anchorid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LpgfSlamSerialize.SensorFeature)
  return target;
}

size_t SensorFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LpgfSlamSerialize.SensorFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string anchorId = 6;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // .LpgfSlamSerialize.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
  if (this->has_closestkeyframeposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closestkeyframeposition_);
  }

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 lastObserved = 2;
  if (this->lastobserved() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lastobserved());
  }

  // int64 observationCount = 5;
  if (this->observationcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->observationcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LpgfSlamSerialize.SensorFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LpgfSlamSerialize.SensorFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LpgfSlamSerialize.SensorFeature)
    MergeFrom(*source);
  }
}

void SensorFeature::MergeFrom(const SensorFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LpgfSlamSerialize.SensorFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.has_position()) {
    mutable_position()->::LpgfSlamSerialize::Position::MergeFrom(from.position());
  }
  if (from.has_closestkeyframeposition()) {
    mutable_closestkeyframeposition()->::LpgfSlamSerialize::Position::MergeFrom(from.closestkeyframeposition());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.lastobserved() != 0) {
    set_lastobserved(from.lastobserved());
  }
  if (from.observationcount() != 0) {
    set_observationcount(from.observationcount());
  }
}

void SensorFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LpgfSlamSerialize.SensorFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorFeature::CopyFrom(const SensorFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LpgfSlamSerialize.SensorFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFeature::IsInitialized() const {
  return true;
}

void SensorFeature::InternalSwap(SensorFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(closestkeyframeposition_, other->closestkeyframeposition_);
  swap(timestamp_, other->timestamp_);
  swap(lastobserved_, other->lastobserved_);
  swap(observationcount_, other->observationcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LpgfSlamSerialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::Position* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::Position >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::Acceleration* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::Acceleration >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::Acceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::Velocity* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::Velocity >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::AngularVelocity* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::AngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::AngularVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::Orientation* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::Orientation >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::GlobalState* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::GlobalState >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::GlobalState >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::GlobalStateInTime* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::GlobalStateInTime >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::GlobalStateInTime >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::TrackerCoordinateSystem* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::TrackerCoordinateSystem >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::TrackerCoordinateSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::CameraImage* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::CameraImage >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::CameraImage >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::SensorImu* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::SensorImu >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::SensorImu >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::SensorGlobalState* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::SensorGlobalState >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::SensorGlobalState >(arena);
}
template<> PROTOBUF_NOINLINE ::LpgfSlamSerialize::SensorFeature* Arena::CreateMaybeMessage< ::LpgfSlamSerialize::SensorFeature >(Arena* arena) {
  return Arena::CreateInternal< ::LpgfSlamSerialize::SensorFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
