// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SlamSerialize.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SlamSerialize_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SlamSerialize_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SlamSerialize_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SlamSerialize_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SlamSerialize_2eproto;
namespace LpgfSlamSerialize {
class Acceleration;
class AccelerationDefaultTypeInternal;
extern AccelerationDefaultTypeInternal _Acceleration_default_instance_;
class AngularVelocity;
class AngularVelocityDefaultTypeInternal;
extern AngularVelocityDefaultTypeInternal _AngularVelocity_default_instance_;
class CameraImage;
class CameraImageDefaultTypeInternal;
extern CameraImageDefaultTypeInternal _CameraImage_default_instance_;
class GlobalState;
class GlobalStateDefaultTypeInternal;
extern GlobalStateDefaultTypeInternal _GlobalState_default_instance_;
class GlobalStateInTime;
class GlobalStateInTimeDefaultTypeInternal;
extern GlobalStateInTimeDefaultTypeInternal _GlobalStateInTime_default_instance_;
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SensorFeature;
class SensorFeatureDefaultTypeInternal;
extern SensorFeatureDefaultTypeInternal _SensorFeature_default_instance_;
class SensorGlobalState;
class SensorGlobalStateDefaultTypeInternal;
extern SensorGlobalStateDefaultTypeInternal _SensorGlobalState_default_instance_;
class SensorImu;
class SensorImuDefaultTypeInternal;
extern SensorImuDefaultTypeInternal _SensorImu_default_instance_;
class TrackerCoordinateSystem;
class TrackerCoordinateSystemDefaultTypeInternal;
extern TrackerCoordinateSystemDefaultTypeInternal _TrackerCoordinateSystem_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace LpgfSlamSerialize
PROTOBUF_NAMESPACE_OPEN
template<> ::LpgfSlamSerialize::Acceleration* Arena::CreateMaybeMessage<::LpgfSlamSerialize::Acceleration>(Arena*);
template<> ::LpgfSlamSerialize::AngularVelocity* Arena::CreateMaybeMessage<::LpgfSlamSerialize::AngularVelocity>(Arena*);
template<> ::LpgfSlamSerialize::CameraImage* Arena::CreateMaybeMessage<::LpgfSlamSerialize::CameraImage>(Arena*);
template<> ::LpgfSlamSerialize::GlobalState* Arena::CreateMaybeMessage<::LpgfSlamSerialize::GlobalState>(Arena*);
template<> ::LpgfSlamSerialize::GlobalStateInTime* Arena::CreateMaybeMessage<::LpgfSlamSerialize::GlobalStateInTime>(Arena*);
template<> ::LpgfSlamSerialize::Orientation* Arena::CreateMaybeMessage<::LpgfSlamSerialize::Orientation>(Arena*);
template<> ::LpgfSlamSerialize::Position* Arena::CreateMaybeMessage<::LpgfSlamSerialize::Position>(Arena*);
template<> ::LpgfSlamSerialize::SensorFeature* Arena::CreateMaybeMessage<::LpgfSlamSerialize::SensorFeature>(Arena*);
template<> ::LpgfSlamSerialize::SensorGlobalState* Arena::CreateMaybeMessage<::LpgfSlamSerialize::SensorGlobalState>(Arena*);
template<> ::LpgfSlamSerialize::SensorImu* Arena::CreateMaybeMessage<::LpgfSlamSerialize::SensorImu>(Arena*);
template<> ::LpgfSlamSerialize::TrackerCoordinateSystem* Arena::CreateMaybeMessage<::LpgfSlamSerialize::TrackerCoordinateSystem>(Arena*);
template<> ::LpgfSlamSerialize::Velocity* Arena::CreateMaybeMessage<::LpgfSlamSerialize::Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LpgfSlamSerialize {

// ===================================================================

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kXSigmaFieldNumber = 4,
    kYSigmaFieldNumber = 5,
    kZSigmaFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double x_sigma = 4;
  void clear_x_sigma();
  double x_sigma() const;
  void set_x_sigma(double value);

  // double y_sigma = 5;
  void clear_y_sigma();
  double y_sigma() const;
  void set_y_sigma(double value);

  // double z_sigma = 6;
  void clear_z_sigma();
  double z_sigma() const;
  void set_z_sigma(double value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double x_sigma_;
  double y_sigma_;
  double z_sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class Acceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.Acceleration) */ {
 public:
  Acceleration();
  virtual ~Acceleration();

  Acceleration(const Acceleration& from);
  Acceleration(Acceleration&& from) noexcept
    : Acceleration() {
    *this = ::std::move(from);
  }

  inline Acceleration& operator=(const Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acceleration& operator=(Acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acceleration* internal_default_instance() {
    return reinterpret_cast<const Acceleration*>(
               &_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Acceleration& a, Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Acceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acceleration* New() const final {
    return CreateMaybeMessage<Acceleration>(nullptr);
  }

  Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acceleration& from);
  void MergeFrom(const Acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.Acceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kXSigmaFieldNumber = 4,
    kYSigmaFieldNumber = 5,
    kZSigmaFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double x_sigma = 4;
  void clear_x_sigma();
  double x_sigma() const;
  void set_x_sigma(double value);

  // double y_sigma = 5;
  void clear_y_sigma();
  double y_sigma() const;
  void set_y_sigma(double value);

  // double z_sigma = 6;
  void clear_z_sigma();
  double z_sigma() const;
  void set_z_sigma(double value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.Acceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double x_sigma_;
  double y_sigma_;
  double z_sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class Velocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.Velocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kXSigmaFieldNumber = 4,
    kYSigmaFieldNumber = 5,
    kZSigmaFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double x_sigma = 4;
  void clear_x_sigma();
  double x_sigma() const;
  void set_x_sigma(double value);

  // double y_sigma = 5;
  void clear_y_sigma();
  double y_sigma() const;
  void set_y_sigma(double value);

  // double z_sigma = 6;
  void clear_z_sigma();
  double z_sigma() const;
  void set_z_sigma(double value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.Velocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double x_sigma_;
  double y_sigma_;
  double z_sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.AngularVelocity) */ {
 public:
  AngularVelocity();
  virtual ~AngularVelocity();

  AngularVelocity(const AngularVelocity& from);
  AngularVelocity(AngularVelocity&& from) noexcept
    : AngularVelocity() {
    *this = ::std::move(from);
  }

  inline AngularVelocity& operator=(const AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocity& operator=(AngularVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AngularVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const AngularVelocity*>(
               &_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AngularVelocity& a, AngularVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AngularVelocity* New() const final {
    return CreateMaybeMessage<AngularVelocity>(nullptr);
  }

  AngularVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AngularVelocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AngularVelocity& from);
  void MergeFrom(const AngularVelocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.AngularVelocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kXSigmaFieldNumber = 4,
    kYSigmaFieldNumber = 5,
    kZSigmaFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double x_sigma = 4;
  void clear_x_sigma();
  double x_sigma() const;
  void set_x_sigma(double value);

  // double y_sigma = 5;
  void clear_y_sigma();
  double y_sigma() const;
  void set_y_sigma(double value);

  // double z_sigma = 6;
  void clear_z_sigma();
  double z_sigma() const;
  void set_z_sigma(double value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.AngularVelocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double x_sigma_;
  double y_sigma_;
  double z_sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class Orientation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.Orientation) */ {
 public:
  Orientation();
  virtual ~Orientation();

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.Orientation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kSigmaFieldNumber = 5,
  };
  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double sigma = 5;
  void clear_sigma();
  double sigma() const;
  void set_sigma(double value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.Orientation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double w_;
  double x_;
  double y_;
  double z_;
  double sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class GlobalState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.GlobalState) */ {
 public:
  GlobalState();
  virtual ~GlobalState();

  GlobalState(const GlobalState& from);
  GlobalState(GlobalState&& from) noexcept
    : GlobalState() {
    *this = ::std::move(from);
  }

  inline GlobalState& operator=(const GlobalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalState& operator=(GlobalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalState* internal_default_instance() {
    return reinterpret_cast<const GlobalState*>(
               &_GlobalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GlobalState& a, GlobalState& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalState* New() const final {
    return CreateMaybeMessage<GlobalState>(nullptr);
  }

  GlobalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalState& from);
  void MergeFrom(const GlobalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.GlobalState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kVelocityValidFieldNumber = 4,
  };
  // .LpgfSlamSerialize.Position position = 1;
  bool has_position() const;
  void clear_position();
  const ::LpgfSlamSerialize::Position& position() const;
  ::LpgfSlamSerialize::Position* release_position();
  ::LpgfSlamSerialize::Position* mutable_position();
  void set_allocated_position(::LpgfSlamSerialize::Position* position);

  // .LpgfSlamSerialize.Orientation orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  const ::LpgfSlamSerialize::Orientation& orientation() const;
  ::LpgfSlamSerialize::Orientation* release_orientation();
  ::LpgfSlamSerialize::Orientation* mutable_orientation();
  void set_allocated_orientation(::LpgfSlamSerialize::Orientation* orientation);

  // .LpgfSlamSerialize.Velocity velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  const ::LpgfSlamSerialize::Velocity& velocity() const;
  ::LpgfSlamSerialize::Velocity* release_velocity();
  ::LpgfSlamSerialize::Velocity* mutable_velocity();
  void set_allocated_velocity(::LpgfSlamSerialize::Velocity* velocity);

  // bool velocityValid = 4;
  void clear_velocityvalid();
  bool velocityvalid() const;
  void set_velocityvalid(bool value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.GlobalState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::LpgfSlamSerialize::Position* position_;
  ::LpgfSlamSerialize::Orientation* orientation_;
  ::LpgfSlamSerialize::Velocity* velocity_;
  bool velocityvalid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class GlobalStateInTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.GlobalStateInTime) */ {
 public:
  GlobalStateInTime();
  virtual ~GlobalStateInTime();

  GlobalStateInTime(const GlobalStateInTime& from);
  GlobalStateInTime(GlobalStateInTime&& from) noexcept
    : GlobalStateInTime() {
    *this = ::std::move(from);
  }

  inline GlobalStateInTime& operator=(const GlobalStateInTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalStateInTime& operator=(GlobalStateInTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalStateInTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalStateInTime* internal_default_instance() {
    return reinterpret_cast<const GlobalStateInTime*>(
               &_GlobalStateInTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GlobalStateInTime& a, GlobalStateInTime& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalStateInTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalStateInTime* New() const final {
    return CreateMaybeMessage<GlobalStateInTime>(nullptr);
  }

  GlobalStateInTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalStateInTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalStateInTime& from);
  void MergeFrom(const GlobalStateInTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalStateInTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.GlobalStateInTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalStateFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // .LpgfSlamSerialize.GlobalState globalState = 2;
  bool has_globalstate() const;
  void clear_globalstate();
  const ::LpgfSlamSerialize::GlobalState& globalstate() const;
  ::LpgfSlamSerialize::GlobalState* release_globalstate();
  ::LpgfSlamSerialize::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::LpgfSlamSerialize::GlobalState* globalstate);

  // int64 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.GlobalStateInTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::LpgfSlamSerialize::GlobalState* globalstate_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class TrackerCoordinateSystem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.TrackerCoordinateSystem) */ {
 public:
  TrackerCoordinateSystem();
  virtual ~TrackerCoordinateSystem();

  TrackerCoordinateSystem(const TrackerCoordinateSystem& from);
  TrackerCoordinateSystem(TrackerCoordinateSystem&& from) noexcept
    : TrackerCoordinateSystem() {
    *this = ::std::move(from);
  }

  inline TrackerCoordinateSystem& operator=(const TrackerCoordinateSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerCoordinateSystem& operator=(TrackerCoordinateSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackerCoordinateSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackerCoordinateSystem* internal_default_instance() {
    return reinterpret_cast<const TrackerCoordinateSystem*>(
               &_TrackerCoordinateSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrackerCoordinateSystem& a, TrackerCoordinateSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerCoordinateSystem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackerCoordinateSystem* New() const final {
    return CreateMaybeMessage<TrackerCoordinateSystem>(nullptr);
  }

  TrackerCoordinateSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackerCoordinateSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackerCoordinateSystem& from);
  void MergeFrom(const TrackerCoordinateSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerCoordinateSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.TrackerCoordinateSystem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .LpgfSlamSerialize.Position position = 1;
  bool has_position() const;
  void clear_position();
  const ::LpgfSlamSerialize::Position& position() const;
  ::LpgfSlamSerialize::Position* release_position();
  ::LpgfSlamSerialize::Position* mutable_position();
  void set_allocated_position(::LpgfSlamSerialize::Position* position);

  // .LpgfSlamSerialize.Orientation orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  const ::LpgfSlamSerialize::Orientation& orientation() const;
  ::LpgfSlamSerialize::Orientation* release_orientation();
  ::LpgfSlamSerialize::Orientation* mutable_orientation();
  void set_allocated_orientation(::LpgfSlamSerialize::Orientation* orientation);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.TrackerCoordinateSystem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::LpgfSlamSerialize::Position* position_;
  ::LpgfSlamSerialize::Orientation* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class CameraImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.CameraImage) */ {
 public:
  CameraImage();
  virtual ~CameraImage();

  CameraImage(const CameraImage& from);
  CameraImage(CameraImage&& from) noexcept
    : CameraImage() {
    *this = ::std::move(from);
  }

  inline CameraImage& operator=(const CameraImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraImage& operator=(CameraImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraImage* internal_default_instance() {
    return reinterpret_cast<const CameraImage*>(
               &_CameraImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CameraImage& a, CameraImage& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraImage* New() const final {
    return CreateMaybeMessage<CameraImage>(nullptr);
  }

  CameraImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraImage& from);
  void MergeFrom(const CameraImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.CameraImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 3,
    kImageDataSecondFieldNumber = 7,
    kStateOdomFieldNumber = 4,
    kStateMapFieldNumber = 5,
    kImageBaseFieldNumber = 9,
    kImageBaseSecondFieldNumber = 10,
    kTimeStampFieldNumber = 1,
    kDataNumberFieldNumber = 2,
    kCameraNumberFieldNumber = 6,
    kCameraNumberSecondFieldNumber = 8,
    kHasGlobalStateOdomFieldNumber = 11,
    kHasGlobalStateMapFieldNumber = 12,
  };
  // bytes imageData = 3;
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);

  // bytes imageData_second = 7;
  void clear_imagedata_second();
  const std::string& imagedata_second() const;
  void set_imagedata_second(const std::string& value);
  void set_imagedata_second(std::string&& value);
  void set_imagedata_second(const char* value);
  void set_imagedata_second(const void* value, size_t size);
  std::string* mutable_imagedata_second();
  std::string* release_imagedata_second();
  void set_allocated_imagedata_second(std::string* imagedata_second);

  // .LpgfSlamSerialize.GlobalState state_odom = 4;
  bool has_state_odom() const;
  void clear_state_odom();
  const ::LpgfSlamSerialize::GlobalState& state_odom() const;
  ::LpgfSlamSerialize::GlobalState* release_state_odom();
  ::LpgfSlamSerialize::GlobalState* mutable_state_odom();
  void set_allocated_state_odom(::LpgfSlamSerialize::GlobalState* state_odom);

  // .LpgfSlamSerialize.GlobalState state_map = 5;
  bool has_state_map() const;
  void clear_state_map();
  const ::LpgfSlamSerialize::GlobalState& state_map() const;
  ::LpgfSlamSerialize::GlobalState* release_state_map();
  ::LpgfSlamSerialize::GlobalState* mutable_state_map();
  void set_allocated_state_map(::LpgfSlamSerialize::GlobalState* state_map);

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
  bool has_imagebase() const;
  void clear_imagebase();
  const ::LpgfSlamSerialize::TrackerCoordinateSystem& imagebase() const;
  ::LpgfSlamSerialize::TrackerCoordinateSystem* release_imagebase();
  ::LpgfSlamSerialize::TrackerCoordinateSystem* mutable_imagebase();
  void set_allocated_imagebase(::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase);

  // .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
  bool has_imagebase_second() const;
  void clear_imagebase_second();
  const ::LpgfSlamSerialize::TrackerCoordinateSystem& imagebase_second() const;
  ::LpgfSlamSerialize::TrackerCoordinateSystem* release_imagebase_second();
  ::LpgfSlamSerialize::TrackerCoordinateSystem* mutable_imagebase_second();
  void set_allocated_imagebase_second(::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase_second);

  // int64 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 dataNumber = 2;
  void clear_datanumber();
  ::PROTOBUF_NAMESPACE_ID::int64 datanumber() const;
  void set_datanumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 cameraNumber = 6;
  void clear_cameranumber();
  ::PROTOBUF_NAMESPACE_ID::int32 cameranumber() const;
  void set_cameranumber(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cameraNumber_second = 8;
  void clear_cameranumber_second();
  ::PROTOBUF_NAMESPACE_ID::int32 cameranumber_second() const;
  void set_cameranumber_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool hasGlobalState_odom = 11;
  void clear_hasglobalstate_odom();
  bool hasglobalstate_odom() const;
  void set_hasglobalstate_odom(bool value);

  // bool hasGlobalState_map = 12;
  void clear_hasglobalstate_map();
  bool hasglobalstate_map() const;
  void set_hasglobalstate_map(bool value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.CameraImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_second_;
  ::LpgfSlamSerialize::GlobalState* state_odom_;
  ::LpgfSlamSerialize::GlobalState* state_map_;
  ::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase_;
  ::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase_second_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 datanumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 cameranumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 cameranumber_second_;
  bool hasglobalstate_odom_;
  bool hasglobalstate_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class SensorImu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.SensorImu) */ {
 public:
  SensorImu();
  virtual ~SensorImu();

  SensorImu(const SensorImu& from);
  SensorImu(SensorImu&& from) noexcept
    : SensorImu() {
    *this = ::std::move(from);
  }

  inline SensorImu& operator=(const SensorImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorImu& operator=(SensorImu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorImu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorImu* internal_default_instance() {
    return reinterpret_cast<const SensorImu*>(
               &_SensorImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SensorImu& a, SensorImu& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorImu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorImu* New() const final {
    return CreateMaybeMessage<SensorImu>(nullptr);
  }

  SensorImu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorImu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorImu& from);
  void MergeFrom(const SensorImu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorImu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.SensorImu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 2,
    kGyroFieldNumber = 3,
    kTimesTampFieldNumber = 1,
  };
  // .LpgfSlamSerialize.Acceleration acc = 2;
  bool has_acc() const;
  void clear_acc();
  const ::LpgfSlamSerialize::Acceleration& acc() const;
  ::LpgfSlamSerialize::Acceleration* release_acc();
  ::LpgfSlamSerialize::Acceleration* mutable_acc();
  void set_allocated_acc(::LpgfSlamSerialize::Acceleration* acc);

  // .LpgfSlamSerialize.AngularVelocity gyro = 3;
  bool has_gyro() const;
  void clear_gyro();
  const ::LpgfSlamSerialize::AngularVelocity& gyro() const;
  ::LpgfSlamSerialize::AngularVelocity* release_gyro();
  ::LpgfSlamSerialize::AngularVelocity* mutable_gyro();
  void set_allocated_gyro(::LpgfSlamSerialize::AngularVelocity* gyro);

  // int64 timesTamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.SensorImu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::LpgfSlamSerialize::Acceleration* acc_;
  ::LpgfSlamSerialize::AngularVelocity* gyro_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class SensorGlobalState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.SensorGlobalState) */ {
 public:
  SensorGlobalState();
  virtual ~SensorGlobalState();

  SensorGlobalState(const SensorGlobalState& from);
  SensorGlobalState(SensorGlobalState&& from) noexcept
    : SensorGlobalState() {
    *this = ::std::move(from);
  }

  inline SensorGlobalState& operator=(const SensorGlobalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorGlobalState& operator=(SensorGlobalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorGlobalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorGlobalState* internal_default_instance() {
    return reinterpret_cast<const SensorGlobalState*>(
               &_SensorGlobalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SensorGlobalState& a, SensorGlobalState& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorGlobalState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorGlobalState* New() const final {
    return CreateMaybeMessage<SensorGlobalState>(nullptr);
  }

  SensorGlobalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorGlobalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorGlobalState& from);
  void MergeFrom(const SensorGlobalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorGlobalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.SensorGlobalState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalStateFieldNumber = 2,
    kTimesTampFieldNumber = 1,
    kReferenceFieldNumber = 3,
  };
  // .LpgfSlamSerialize.GlobalState globalState = 2;
  bool has_globalstate() const;
  void clear_globalstate();
  const ::LpgfSlamSerialize::GlobalState& globalstate() const;
  ::LpgfSlamSerialize::GlobalState* release_globalstate();
  ::LpgfSlamSerialize::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::LpgfSlamSerialize::GlobalState* globalstate);

  // int64 timesTamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool reference = 3;
  void clear_reference();
  bool reference() const;
  void set_reference(bool value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.SensorGlobalState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::LpgfSlamSerialize::GlobalState* globalstate_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// -------------------------------------------------------------------

class SensorFeature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LpgfSlamSerialize.SensorFeature) */ {
 public:
  SensorFeature();
  virtual ~SensorFeature();

  SensorFeature(const SensorFeature& from);
  SensorFeature(SensorFeature&& from) noexcept
    : SensorFeature() {
    *this = ::std::move(from);
  }

  inline SensorFeature& operator=(const SensorFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorFeature& operator=(SensorFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorFeature* internal_default_instance() {
    return reinterpret_cast<const SensorFeature*>(
               &_SensorFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SensorFeature& a, SensorFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorFeature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorFeature* New() const final {
    return CreateMaybeMessage<SensorFeature>(nullptr);
  }

  SensorFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorFeature& from);
  void MergeFrom(const SensorFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LpgfSlamSerialize.SensorFeature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SlamSerialize_2eproto);
    return ::descriptor_table_SlamSerialize_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorIdFieldNumber = 6,
    kPositionFieldNumber = 3,
    kClosestKeyframePositionFieldNumber = 4,
    kTimeStampFieldNumber = 1,
    kLastObservedFieldNumber = 2,
    kObservationCountFieldNumber = 5,
  };
  // string anchorId = 6;
  void clear_anchorid();
  const std::string& anchorid() const;
  void set_anchorid(const std::string& value);
  void set_anchorid(std::string&& value);
  void set_anchorid(const char* value);
  void set_anchorid(const char* value, size_t size);
  std::string* mutable_anchorid();
  std::string* release_anchorid();
  void set_allocated_anchorid(std::string* anchorid);

  // .LpgfSlamSerialize.Position position = 3;
  bool has_position() const;
  void clear_position();
  const ::LpgfSlamSerialize::Position& position() const;
  ::LpgfSlamSerialize::Position* release_position();
  ::LpgfSlamSerialize::Position* mutable_position();
  void set_allocated_position(::LpgfSlamSerialize::Position* position);

  // .LpgfSlamSerialize.Position closestKeyframePosition = 4;
  bool has_closestkeyframeposition() const;
  void clear_closestkeyframeposition();
  const ::LpgfSlamSerialize::Position& closestkeyframeposition() const;
  ::LpgfSlamSerialize::Position* release_closestkeyframeposition();
  ::LpgfSlamSerialize::Position* mutable_closestkeyframeposition();
  void set_allocated_closestkeyframeposition(::LpgfSlamSerialize::Position* closestkeyframeposition);

  // int64 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lastObserved = 2;
  void clear_lastobserved();
  ::PROTOBUF_NAMESPACE_ID::int64 lastobserved() const;
  void set_lastobserved(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 observationCount = 5;
  void clear_observationcount();
  ::PROTOBUF_NAMESPACE_ID::int64 observationcount() const;
  void set_observationcount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:LpgfSlamSerialize.SensorFeature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchorid_;
  ::LpgfSlamSerialize::Position* position_;
  ::LpgfSlamSerialize::Position* closestkeyframeposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastobserved_;
  ::PROTOBUF_NAMESPACE_ID::int64 observationcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SlamSerialize_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.z)
}

// double x_sigma = 4;
inline void Position::clear_x_sigma() {
  x_sigma_ = 0;
}
inline double Position::x_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.x_sigma)
  return x_sigma_;
}
inline void Position::set_x_sigma(double value) {
  
  x_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.x_sigma)
}

// double y_sigma = 5;
inline void Position::clear_y_sigma() {
  y_sigma_ = 0;
}
inline double Position::y_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.y_sigma)
  return y_sigma_;
}
inline void Position::set_y_sigma(double value) {
  
  y_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.y_sigma)
}

// double z_sigma = 6;
inline void Position::clear_z_sigma() {
  z_sigma_ = 0;
}
inline double Position::z_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Position.z_sigma)
  return z_sigma_;
}
inline void Position::set_z_sigma(double value) {
  
  z_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Position.z_sigma)
}

// -------------------------------------------------------------------

// Acceleration

// double x = 1;
inline void Acceleration::clear_x() {
  x_ = 0;
}
inline double Acceleration::x() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.x)
  return x_;
}
inline void Acceleration::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.x)
}

// double y = 2;
inline void Acceleration::clear_y() {
  y_ = 0;
}
inline double Acceleration::y() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.y)
  return y_;
}
inline void Acceleration::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.y)
}

// double z = 3;
inline void Acceleration::clear_z() {
  z_ = 0;
}
inline double Acceleration::z() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.z)
  return z_;
}
inline void Acceleration::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.z)
}

// double x_sigma = 4;
inline void Acceleration::clear_x_sigma() {
  x_sigma_ = 0;
}
inline double Acceleration::x_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.x_sigma)
  return x_sigma_;
}
inline void Acceleration::set_x_sigma(double value) {
  
  x_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.x_sigma)
}

// double y_sigma = 5;
inline void Acceleration::clear_y_sigma() {
  y_sigma_ = 0;
}
inline double Acceleration::y_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.y_sigma)
  return y_sigma_;
}
inline void Acceleration::set_y_sigma(double value) {
  
  y_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.y_sigma)
}

// double z_sigma = 6;
inline void Acceleration::clear_z_sigma() {
  z_sigma_ = 0;
}
inline double Acceleration::z_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Acceleration.z_sigma)
  return z_sigma_;
}
inline void Acceleration::set_z_sigma(double value) {
  
  z_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Acceleration.z_sigma)
}

// -------------------------------------------------------------------

// Velocity

// double x = 1;
inline void Velocity::clear_x() {
  x_ = 0;
}
inline double Velocity::x() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.x)
  return x_;
}
inline void Velocity::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.x)
}

// double y = 2;
inline void Velocity::clear_y() {
  y_ = 0;
}
inline double Velocity::y() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.y)
  return y_;
}
inline void Velocity::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.y)
}

// double z = 3;
inline void Velocity::clear_z() {
  z_ = 0;
}
inline double Velocity::z() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.z)
  return z_;
}
inline void Velocity::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.z)
}

// double x_sigma = 4;
inline void Velocity::clear_x_sigma() {
  x_sigma_ = 0;
}
inline double Velocity::x_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.x_sigma)
  return x_sigma_;
}
inline void Velocity::set_x_sigma(double value) {
  
  x_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.x_sigma)
}

// double y_sigma = 5;
inline void Velocity::clear_y_sigma() {
  y_sigma_ = 0;
}
inline double Velocity::y_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.y_sigma)
  return y_sigma_;
}
inline void Velocity::set_y_sigma(double value) {
  
  y_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.y_sigma)
}

// double z_sigma = 6;
inline void Velocity::clear_z_sigma() {
  z_sigma_ = 0;
}
inline double Velocity::z_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Velocity.z_sigma)
  return z_sigma_;
}
inline void Velocity::set_z_sigma(double value) {
  
  z_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Velocity.z_sigma)
}

// -------------------------------------------------------------------

// AngularVelocity

// double x = 1;
inline void AngularVelocity::clear_x() {
  x_ = 0;
}
inline double AngularVelocity::x() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.x)
  return x_;
}
inline void AngularVelocity::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.x)
}

// double y = 2;
inline void AngularVelocity::clear_y() {
  y_ = 0;
}
inline double AngularVelocity::y() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.y)
  return y_;
}
inline void AngularVelocity::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.y)
}

// double z = 3;
inline void AngularVelocity::clear_z() {
  z_ = 0;
}
inline double AngularVelocity::z() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.z)
  return z_;
}
inline void AngularVelocity::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.z)
}

// double x_sigma = 4;
inline void AngularVelocity::clear_x_sigma() {
  x_sigma_ = 0;
}
inline double AngularVelocity::x_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.x_sigma)
  return x_sigma_;
}
inline void AngularVelocity::set_x_sigma(double value) {
  
  x_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.x_sigma)
}

// double y_sigma = 5;
inline void AngularVelocity::clear_y_sigma() {
  y_sigma_ = 0;
}
inline double AngularVelocity::y_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.y_sigma)
  return y_sigma_;
}
inline void AngularVelocity::set_y_sigma(double value) {
  
  y_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.y_sigma)
}

// double z_sigma = 6;
inline void AngularVelocity::clear_z_sigma() {
  z_sigma_ = 0;
}
inline double AngularVelocity::z_sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.AngularVelocity.z_sigma)
  return z_sigma_;
}
inline void AngularVelocity::set_z_sigma(double value) {
  
  z_sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.AngularVelocity.z_sigma)
}

// -------------------------------------------------------------------

// Orientation

// double w = 1;
inline void Orientation::clear_w() {
  w_ = 0;
}
inline double Orientation::w() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Orientation.w)
  return w_;
}
inline void Orientation::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Orientation.w)
}

// double x = 2;
inline void Orientation::clear_x() {
  x_ = 0;
}
inline double Orientation::x() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Orientation.x)
  return x_;
}
inline void Orientation::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Orientation.x)
}

// double y = 3;
inline void Orientation::clear_y() {
  y_ = 0;
}
inline double Orientation::y() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Orientation.y)
  return y_;
}
inline void Orientation::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Orientation.y)
}

// double z = 4;
inline void Orientation::clear_z() {
  z_ = 0;
}
inline double Orientation::z() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Orientation.z)
  return z_;
}
inline void Orientation::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Orientation.z)
}

// double sigma = 5;
inline void Orientation::clear_sigma() {
  sigma_ = 0;
}
inline double Orientation::sigma() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.Orientation.sigma)
  return sigma_;
}
inline void Orientation::set_sigma(double value) {
  
  sigma_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.Orientation.sigma)
}

// -------------------------------------------------------------------

// GlobalState

// .LpgfSlamSerialize.Position position = 1;
inline bool GlobalState::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void GlobalState::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::LpgfSlamSerialize::Position& GlobalState::position() const {
  const ::LpgfSlamSerialize::Position* p = position_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalState.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Position*>(
      &::LpgfSlamSerialize::_Position_default_instance_);
}
inline ::LpgfSlamSerialize::Position* GlobalState::release_position() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.GlobalState.position)
  
  ::LpgfSlamSerialize::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Position* GlobalState::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.GlobalState.position)
  return position_;
}
inline void GlobalState::set_allocated_position(::LpgfSlamSerialize::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.GlobalState.position)
}

// .LpgfSlamSerialize.Orientation orientation = 2;
inline bool GlobalState::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void GlobalState::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::LpgfSlamSerialize::Orientation& GlobalState::orientation() const {
  const ::LpgfSlamSerialize::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalState.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Orientation*>(
      &::LpgfSlamSerialize::_Orientation_default_instance_);
}
inline ::LpgfSlamSerialize::Orientation* GlobalState::release_orientation() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.GlobalState.orientation)
  
  ::LpgfSlamSerialize::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Orientation* GlobalState::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.GlobalState.orientation)
  return orientation_;
}
inline void GlobalState::set_allocated_orientation(::LpgfSlamSerialize::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.GlobalState.orientation)
}

// .LpgfSlamSerialize.Velocity velocity = 3;
inline bool GlobalState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline void GlobalState::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::LpgfSlamSerialize::Velocity& GlobalState::velocity() const {
  const ::LpgfSlamSerialize::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalState.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Velocity*>(
      &::LpgfSlamSerialize::_Velocity_default_instance_);
}
inline ::LpgfSlamSerialize::Velocity* GlobalState::release_velocity() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.GlobalState.velocity)
  
  ::LpgfSlamSerialize::Velocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Velocity* GlobalState::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.GlobalState.velocity)
  return velocity_;
}
inline void GlobalState::set_allocated_velocity(::LpgfSlamSerialize::Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.GlobalState.velocity)
}

// bool velocityValid = 4;
inline void GlobalState::clear_velocityvalid() {
  velocityvalid_ = false;
}
inline bool GlobalState::velocityvalid() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalState.velocityValid)
  return velocityvalid_;
}
inline void GlobalState::set_velocityvalid(bool value) {
  
  velocityvalid_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.GlobalState.velocityValid)
}

// -------------------------------------------------------------------

// GlobalStateInTime

// int64 timeStamp = 1;
inline void GlobalStateInTime::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalStateInTime::timestamp() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalStateInTime.timeStamp)
  return timestamp_;
}
inline void GlobalStateInTime::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.GlobalStateInTime.timeStamp)
}

// .LpgfSlamSerialize.GlobalState globalState = 2;
inline bool GlobalStateInTime::has_globalstate() const {
  return this != internal_default_instance() && globalstate_ != nullptr;
}
inline void GlobalStateInTime::clear_globalstate() {
  if (GetArenaNoVirtual() == nullptr && globalstate_ != nullptr) {
    delete globalstate_;
  }
  globalstate_ = nullptr;
}
inline const ::LpgfSlamSerialize::GlobalState& GlobalStateInTime::globalstate() const {
  const ::LpgfSlamSerialize::GlobalState* p = globalstate_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.GlobalStateInTime.globalState)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::GlobalState*>(
      &::LpgfSlamSerialize::_GlobalState_default_instance_);
}
inline ::LpgfSlamSerialize::GlobalState* GlobalStateInTime::release_globalstate() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.GlobalStateInTime.globalState)
  
  ::LpgfSlamSerialize::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::GlobalState* GlobalStateInTime::mutable_globalstate() {
  
  if (globalstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::GlobalState>(GetArenaNoVirtual());
    globalstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.GlobalStateInTime.globalState)
  return globalstate_;
}
inline void GlobalStateInTime::set_allocated_globalstate(::LpgfSlamSerialize::GlobalState* globalstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete globalstate_;
  }
  if (globalstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      globalstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    
  } else {
    
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.GlobalStateInTime.globalState)
}

// -------------------------------------------------------------------

// TrackerCoordinateSystem

// .LpgfSlamSerialize.Position position = 1;
inline bool TrackerCoordinateSystem::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void TrackerCoordinateSystem::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::LpgfSlamSerialize::Position& TrackerCoordinateSystem::position() const {
  const ::LpgfSlamSerialize::Position* p = position_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.TrackerCoordinateSystem.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Position*>(
      &::LpgfSlamSerialize::_Position_default_instance_);
}
inline ::LpgfSlamSerialize::Position* TrackerCoordinateSystem::release_position() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.TrackerCoordinateSystem.position)
  
  ::LpgfSlamSerialize::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Position* TrackerCoordinateSystem::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.TrackerCoordinateSystem.position)
  return position_;
}
inline void TrackerCoordinateSystem::set_allocated_position(::LpgfSlamSerialize::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.TrackerCoordinateSystem.position)
}

// .LpgfSlamSerialize.Orientation orientation = 2;
inline bool TrackerCoordinateSystem::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void TrackerCoordinateSystem::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::LpgfSlamSerialize::Orientation& TrackerCoordinateSystem::orientation() const {
  const ::LpgfSlamSerialize::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.TrackerCoordinateSystem.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Orientation*>(
      &::LpgfSlamSerialize::_Orientation_default_instance_);
}
inline ::LpgfSlamSerialize::Orientation* TrackerCoordinateSystem::release_orientation() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.TrackerCoordinateSystem.orientation)
  
  ::LpgfSlamSerialize::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Orientation* TrackerCoordinateSystem::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.TrackerCoordinateSystem.orientation)
  return orientation_;
}
inline void TrackerCoordinateSystem::set_allocated_orientation(::LpgfSlamSerialize::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.TrackerCoordinateSystem.orientation)
}

// -------------------------------------------------------------------

// CameraImage

// int64 timeStamp = 1;
inline void CameraImage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraImage::timestamp() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.timeStamp)
  return timestamp_;
}
inline void CameraImage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.timeStamp)
}

// int64 dataNumber = 2;
inline void CameraImage::clear_datanumber() {
  datanumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraImage::datanumber() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.dataNumber)
  return datanumber_;
}
inline void CameraImage::set_datanumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datanumber_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.dataNumber)
}

// bytes imageData = 3;
inline void CameraImage::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraImage::imagedata() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.imageData)
  return imagedata_.GetNoArena();
}
inline void CameraImage::set_imagedata(const std::string& value) {
  
  imagedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.imageData)
}
inline void CameraImage::set_imagedata(std::string&& value) {
  
  imagedata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LpgfSlamSerialize.CameraImage.imageData)
}
inline void CameraImage::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LpgfSlamSerialize.CameraImage.imageData)
}
inline void CameraImage::set_imagedata(const void* value, size_t size) {
  
  imagedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LpgfSlamSerialize.CameraImage.imageData)
}
inline std::string* CameraImage::mutable_imagedata() {
  
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.imageData)
  return imagedata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraImage::release_imagedata() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.imageData)
  
  return imagedata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraImage::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    
  } else {
    
  }
  imagedata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.imageData)
}

// .LpgfSlamSerialize.GlobalState state_odom = 4;
inline bool CameraImage::has_state_odom() const {
  return this != internal_default_instance() && state_odom_ != nullptr;
}
inline void CameraImage::clear_state_odom() {
  if (GetArenaNoVirtual() == nullptr && state_odom_ != nullptr) {
    delete state_odom_;
  }
  state_odom_ = nullptr;
}
inline const ::LpgfSlamSerialize::GlobalState& CameraImage::state_odom() const {
  const ::LpgfSlamSerialize::GlobalState* p = state_odom_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.state_odom)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::GlobalState*>(
      &::LpgfSlamSerialize::_GlobalState_default_instance_);
}
inline ::LpgfSlamSerialize::GlobalState* CameraImage::release_state_odom() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.state_odom)
  
  ::LpgfSlamSerialize::GlobalState* temp = state_odom_;
  state_odom_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::GlobalState* CameraImage::mutable_state_odom() {
  
  if (state_odom_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::GlobalState>(GetArenaNoVirtual());
    state_odom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.state_odom)
  return state_odom_;
}
inline void CameraImage::set_allocated_state_odom(::LpgfSlamSerialize::GlobalState* state_odom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_odom_;
  }
  if (state_odom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state_odom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_odom, submessage_arena);
    }
    
  } else {
    
  }
  state_odom_ = state_odom;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.state_odom)
}

// .LpgfSlamSerialize.GlobalState state_map = 5;
inline bool CameraImage::has_state_map() const {
  return this != internal_default_instance() && state_map_ != nullptr;
}
inline void CameraImage::clear_state_map() {
  if (GetArenaNoVirtual() == nullptr && state_map_ != nullptr) {
    delete state_map_;
  }
  state_map_ = nullptr;
}
inline const ::LpgfSlamSerialize::GlobalState& CameraImage::state_map() const {
  const ::LpgfSlamSerialize::GlobalState* p = state_map_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.state_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::GlobalState*>(
      &::LpgfSlamSerialize::_GlobalState_default_instance_);
}
inline ::LpgfSlamSerialize::GlobalState* CameraImage::release_state_map() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.state_map)
  
  ::LpgfSlamSerialize::GlobalState* temp = state_map_;
  state_map_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::GlobalState* CameraImage::mutable_state_map() {
  
  if (state_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::GlobalState>(GetArenaNoVirtual());
    state_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.state_map)
  return state_map_;
}
inline void CameraImage::set_allocated_state_map(::LpgfSlamSerialize::GlobalState* state_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_map_;
  }
  if (state_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_map, submessage_arena);
    }
    
  } else {
    
  }
  state_map_ = state_map;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.state_map)
}

// int32 cameraNumber = 6;
inline void CameraImage::clear_cameranumber() {
  cameranumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraImage::cameranumber() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.cameraNumber)
  return cameranumber_;
}
inline void CameraImage::set_cameranumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cameranumber_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.cameraNumber)
}

// bytes imageData_second = 7;
inline void CameraImage::clear_imagedata_second() {
  imagedata_second_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraImage::imagedata_second() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.imageData_second)
  return imagedata_second_.GetNoArena();
}
inline void CameraImage::set_imagedata_second(const std::string& value) {
  
  imagedata_second_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.imageData_second)
}
inline void CameraImage::set_imagedata_second(std::string&& value) {
  
  imagedata_second_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LpgfSlamSerialize.CameraImage.imageData_second)
}
inline void CameraImage::set_imagedata_second(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagedata_second_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LpgfSlamSerialize.CameraImage.imageData_second)
}
inline void CameraImage::set_imagedata_second(const void* value, size_t size) {
  
  imagedata_second_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LpgfSlamSerialize.CameraImage.imageData_second)
}
inline std::string* CameraImage::mutable_imagedata_second() {
  
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.imageData_second)
  return imagedata_second_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraImage::release_imagedata_second() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.imageData_second)
  
  return imagedata_second_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraImage::set_allocated_imagedata_second(std::string* imagedata_second) {
  if (imagedata_second != nullptr) {
    
  } else {
    
  }
  imagedata_second_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata_second);
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.imageData_second)
}

// int32 cameraNumber_second = 8;
inline void CameraImage::clear_cameranumber_second() {
  cameranumber_second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraImage::cameranumber_second() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.cameraNumber_second)
  return cameranumber_second_;
}
inline void CameraImage::set_cameranumber_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cameranumber_second_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.cameraNumber_second)
}

// .LpgfSlamSerialize.TrackerCoordinateSystem imageBase = 9;
inline bool CameraImage::has_imagebase() const {
  return this != internal_default_instance() && imagebase_ != nullptr;
}
inline void CameraImage::clear_imagebase() {
  if (GetArenaNoVirtual() == nullptr && imagebase_ != nullptr) {
    delete imagebase_;
  }
  imagebase_ = nullptr;
}
inline const ::LpgfSlamSerialize::TrackerCoordinateSystem& CameraImage::imagebase() const {
  const ::LpgfSlamSerialize::TrackerCoordinateSystem* p = imagebase_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.imageBase)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::TrackerCoordinateSystem*>(
      &::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_);
}
inline ::LpgfSlamSerialize::TrackerCoordinateSystem* CameraImage::release_imagebase() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.imageBase)
  
  ::LpgfSlamSerialize::TrackerCoordinateSystem* temp = imagebase_;
  imagebase_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::TrackerCoordinateSystem* CameraImage::mutable_imagebase() {
  
  if (imagebase_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::TrackerCoordinateSystem>(GetArenaNoVirtual());
    imagebase_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.imageBase)
  return imagebase_;
}
inline void CameraImage::set_allocated_imagebase(::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete imagebase_;
  }
  if (imagebase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imagebase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagebase, submessage_arena);
    }
    
  } else {
    
  }
  imagebase_ = imagebase;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.imageBase)
}

// .LpgfSlamSerialize.TrackerCoordinateSystem imageBase_second = 10;
inline bool CameraImage::has_imagebase_second() const {
  return this != internal_default_instance() && imagebase_second_ != nullptr;
}
inline void CameraImage::clear_imagebase_second() {
  if (GetArenaNoVirtual() == nullptr && imagebase_second_ != nullptr) {
    delete imagebase_second_;
  }
  imagebase_second_ = nullptr;
}
inline const ::LpgfSlamSerialize::TrackerCoordinateSystem& CameraImage::imagebase_second() const {
  const ::LpgfSlamSerialize::TrackerCoordinateSystem* p = imagebase_second_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.imageBase_second)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::TrackerCoordinateSystem*>(
      &::LpgfSlamSerialize::_TrackerCoordinateSystem_default_instance_);
}
inline ::LpgfSlamSerialize::TrackerCoordinateSystem* CameraImage::release_imagebase_second() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.CameraImage.imageBase_second)
  
  ::LpgfSlamSerialize::TrackerCoordinateSystem* temp = imagebase_second_;
  imagebase_second_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::TrackerCoordinateSystem* CameraImage::mutable_imagebase_second() {
  
  if (imagebase_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::TrackerCoordinateSystem>(GetArenaNoVirtual());
    imagebase_second_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.CameraImage.imageBase_second)
  return imagebase_second_;
}
inline void CameraImage::set_allocated_imagebase_second(::LpgfSlamSerialize::TrackerCoordinateSystem* imagebase_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete imagebase_second_;
  }
  if (imagebase_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imagebase_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagebase_second, submessage_arena);
    }
    
  } else {
    
  }
  imagebase_second_ = imagebase_second;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.CameraImage.imageBase_second)
}

// bool hasGlobalState_odom = 11;
inline void CameraImage::clear_hasglobalstate_odom() {
  hasglobalstate_odom_ = false;
}
inline bool CameraImage::hasglobalstate_odom() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.hasGlobalState_odom)
  return hasglobalstate_odom_;
}
inline void CameraImage::set_hasglobalstate_odom(bool value) {
  
  hasglobalstate_odom_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.hasGlobalState_odom)
}

// bool hasGlobalState_map = 12;
inline void CameraImage::clear_hasglobalstate_map() {
  hasglobalstate_map_ = false;
}
inline bool CameraImage::hasglobalstate_map() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.CameraImage.hasGlobalState_map)
  return hasglobalstate_map_;
}
inline void CameraImage::set_hasglobalstate_map(bool value) {
  
  hasglobalstate_map_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.CameraImage.hasGlobalState_map)
}

// -------------------------------------------------------------------

// SensorImu

// int64 timesTamp = 1;
inline void SensorImu::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorImu::timestamp() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorImu.timesTamp)
  return timestamp_;
}
inline void SensorImu::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorImu.timesTamp)
}

// .LpgfSlamSerialize.Acceleration acc = 2;
inline bool SensorImu::has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline void SensorImu::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
inline const ::LpgfSlamSerialize::Acceleration& SensorImu::acc() const {
  const ::LpgfSlamSerialize::Acceleration* p = acc_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorImu.acc)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Acceleration*>(
      &::LpgfSlamSerialize::_Acceleration_default_instance_);
}
inline ::LpgfSlamSerialize::Acceleration* SensorImu::release_acc() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorImu.acc)
  
  ::LpgfSlamSerialize::Acceleration* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Acceleration* SensorImu::mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Acceleration>(GetArenaNoVirtual());
    acc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorImu.acc)
  return acc_;
}
inline void SensorImu::set_allocated_acc(::LpgfSlamSerialize::Acceleration* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorImu.acc)
}

// .LpgfSlamSerialize.AngularVelocity gyro = 3;
inline bool SensorImu::has_gyro() const {
  return this != internal_default_instance() && gyro_ != nullptr;
}
inline void SensorImu::clear_gyro() {
  if (GetArenaNoVirtual() == nullptr && gyro_ != nullptr) {
    delete gyro_;
  }
  gyro_ = nullptr;
}
inline const ::LpgfSlamSerialize::AngularVelocity& SensorImu::gyro() const {
  const ::LpgfSlamSerialize::AngularVelocity* p = gyro_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorImu.gyro)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::AngularVelocity*>(
      &::LpgfSlamSerialize::_AngularVelocity_default_instance_);
}
inline ::LpgfSlamSerialize::AngularVelocity* SensorImu::release_gyro() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorImu.gyro)
  
  ::LpgfSlamSerialize::AngularVelocity* temp = gyro_;
  gyro_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::AngularVelocity* SensorImu::mutable_gyro() {
  
  if (gyro_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::AngularVelocity>(GetArenaNoVirtual());
    gyro_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorImu.gyro)
  return gyro_;
}
inline void SensorImu::set_allocated_gyro(::LpgfSlamSerialize::AngularVelocity* gyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gyro_;
  }
  if (gyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    
  } else {
    
  }
  gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorImu.gyro)
}

// -------------------------------------------------------------------

// SensorGlobalState

// int64 timesTamp = 1;
inline void SensorGlobalState::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorGlobalState::timestamp() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorGlobalState.timesTamp)
  return timestamp_;
}
inline void SensorGlobalState::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorGlobalState.timesTamp)
}

// .LpgfSlamSerialize.GlobalState globalState = 2;
inline bool SensorGlobalState::has_globalstate() const {
  return this != internal_default_instance() && globalstate_ != nullptr;
}
inline void SensorGlobalState::clear_globalstate() {
  if (GetArenaNoVirtual() == nullptr && globalstate_ != nullptr) {
    delete globalstate_;
  }
  globalstate_ = nullptr;
}
inline const ::LpgfSlamSerialize::GlobalState& SensorGlobalState::globalstate() const {
  const ::LpgfSlamSerialize::GlobalState* p = globalstate_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorGlobalState.globalState)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::GlobalState*>(
      &::LpgfSlamSerialize::_GlobalState_default_instance_);
}
inline ::LpgfSlamSerialize::GlobalState* SensorGlobalState::release_globalstate() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorGlobalState.globalState)
  
  ::LpgfSlamSerialize::GlobalState* temp = globalstate_;
  globalstate_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::GlobalState* SensorGlobalState::mutable_globalstate() {
  
  if (globalstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::GlobalState>(GetArenaNoVirtual());
    globalstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorGlobalState.globalState)
  return globalstate_;
}
inline void SensorGlobalState::set_allocated_globalstate(::LpgfSlamSerialize::GlobalState* globalstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete globalstate_;
  }
  if (globalstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      globalstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    
  } else {
    
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorGlobalState.globalState)
}

// bool reference = 3;
inline void SensorGlobalState::clear_reference() {
  reference_ = false;
}
inline bool SensorGlobalState::reference() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorGlobalState.reference)
  return reference_;
}
inline void SensorGlobalState::set_reference(bool value) {
  
  reference_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorGlobalState.reference)
}

// -------------------------------------------------------------------

// SensorFeature

// int64 timeStamp = 1;
inline void SensorFeature::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorFeature::timestamp() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.timeStamp)
  return timestamp_;
}
inline void SensorFeature::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorFeature.timeStamp)
}

// int64 lastObserved = 2;
inline void SensorFeature::clear_lastobserved() {
  lastobserved_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorFeature::lastobserved() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.lastObserved)
  return lastobserved_;
}
inline void SensorFeature::set_lastobserved(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastobserved_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorFeature.lastObserved)
}

// .LpgfSlamSerialize.Position position = 3;
inline bool SensorFeature::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void SensorFeature::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::LpgfSlamSerialize::Position& SensorFeature::position() const {
  const ::LpgfSlamSerialize::Position* p = position_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Position*>(
      &::LpgfSlamSerialize::_Position_default_instance_);
}
inline ::LpgfSlamSerialize::Position* SensorFeature::release_position() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorFeature.position)
  
  ::LpgfSlamSerialize::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Position* SensorFeature::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorFeature.position)
  return position_;
}
inline void SensorFeature::set_allocated_position(::LpgfSlamSerialize::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorFeature.position)
}

// .LpgfSlamSerialize.Position closestKeyframePosition = 4;
inline bool SensorFeature::has_closestkeyframeposition() const {
  return this != internal_default_instance() && closestkeyframeposition_ != nullptr;
}
inline void SensorFeature::clear_closestkeyframeposition() {
  if (GetArenaNoVirtual() == nullptr && closestkeyframeposition_ != nullptr) {
    delete closestkeyframeposition_;
  }
  closestkeyframeposition_ = nullptr;
}
inline const ::LpgfSlamSerialize::Position& SensorFeature::closestkeyframeposition() const {
  const ::LpgfSlamSerialize::Position* p = closestkeyframeposition_;
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.closestKeyframePosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::LpgfSlamSerialize::Position*>(
      &::LpgfSlamSerialize::_Position_default_instance_);
}
inline ::LpgfSlamSerialize::Position* SensorFeature::release_closestkeyframeposition() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorFeature.closestKeyframePosition)
  
  ::LpgfSlamSerialize::Position* temp = closestkeyframeposition_;
  closestkeyframeposition_ = nullptr;
  return temp;
}
inline ::LpgfSlamSerialize::Position* SensorFeature::mutable_closestkeyframeposition() {
  
  if (closestkeyframeposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::LpgfSlamSerialize::Position>(GetArenaNoVirtual());
    closestkeyframeposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorFeature.closestKeyframePosition)
  return closestkeyframeposition_;
}
inline void SensorFeature::set_allocated_closestkeyframeposition(::LpgfSlamSerialize::Position* closestkeyframeposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete closestkeyframeposition_;
  }
  if (closestkeyframeposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closestkeyframeposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closestkeyframeposition, submessage_arena);
    }
    
  } else {
    
  }
  closestkeyframeposition_ = closestkeyframeposition;
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorFeature.closestKeyframePosition)
}

// int64 observationCount = 5;
inline void SensorFeature::clear_observationcount() {
  observationcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorFeature::observationcount() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.observationCount)
  return observationcount_;
}
inline void SensorFeature::set_observationcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  observationcount_ = value;
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorFeature.observationCount)
}

// string anchorId = 6;
inline void SensorFeature::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorFeature::anchorid() const {
  // @@protoc_insertion_point(field_get:LpgfSlamSerialize.SensorFeature.anchorId)
  return anchorid_.GetNoArena();
}
inline void SensorFeature::set_anchorid(const std::string& value) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LpgfSlamSerialize.SensorFeature.anchorId)
}
inline void SensorFeature::set_anchorid(std::string&& value) {
  
  anchorid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LpgfSlamSerialize.SensorFeature.anchorId)
}
inline void SensorFeature::set_anchorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LpgfSlamSerialize.SensorFeature.anchorId)
}
inline void SensorFeature::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LpgfSlamSerialize.SensorFeature.anchorId)
}
inline std::string* SensorFeature::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:LpgfSlamSerialize.SensorFeature.anchorId)
  return anchorid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorFeature::release_anchorid() {
  // @@protoc_insertion_point(field_release:LpgfSlamSerialize.SensorFeature.anchorId)
  
  return anchorid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorFeature::set_allocated_anchorid(std::string* anchorid) {
  if (anchorid != nullptr) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:LpgfSlamSerialize.SensorFeature.anchorId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LpgfSlamSerialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SlamSerialize_2eproto
